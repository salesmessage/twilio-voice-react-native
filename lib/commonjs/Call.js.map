{"version":3,"names":["_eventemitter","require","_common","_constants","_utility","_CallMessage","_OutgoingCallMessage","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","TypeError","Number","Call","EventEmitter","constructor","uuid","customParameters","from","sid","state","to","isMuted","isOnHold","initialConnectedTimestamp","nativeCallEvent","type","callInfo","handler","_nativeEventHandler","Error","_uuid","Constants","CallEventConnected","_update","emit","Event","Connected","CallEventConnectFailure","message","code","error","constructTwilioError","ConnectFailure","CallEventDisconnected","Disconnected","CallEventReconnecting","Reconnecting","CallEventReconnected","Reconnected","CallEventRinging","Ringing","CallEventQualityWarningsChanged","currentWarnings","previousWarnings","QualityWarningsChanged","CallEventMessageReceived","callMessage","callMessageInfo","CallMessage","MessageReceived","_customParameters","_from","_sid","_state","State","Connecting","_to","_isMuted","_isOnHold","_initialConnectedTimestamp","Date","undefined","_handleConnectedEvent","_handleConnectFailureEvent","_handleDisconnectedEvent","_handleReconnectedEvent","_handleReconnectingEvent","_handleRingingEvent","_handleQualityWarningsChangedEvent","_handleMessageReceivedEvent","NativeEventEmitter","addListener","ScopeCall","_handleNativeEvent","newState","EventTypeStateMap","disconnect","NativeModule","call_disconnect","getCustomParameters","getFrom","getInitialConnectedTimestamp","getSid","getState","getStats","call_getStats","getTo","hold","call_hold","mute","call_mute","sendDigits","digits","call_sendDigits","sendMessage","content","getContent","contentType","getContentType","messageType","getMessageType","voiceEventSid","call_sendMessage","JSON","stringify","outgoingCallMessage","OutgoingCallMessage","postFeedback","score","issue","call_postFeedback","exports","_Call2","CallStateConnected","CallStateConnecting","CallStateDisconnected","CallStateReconnecting","CallStateRinging","QualityWarning","Score","Issue"],"sources":["Call.tsx"],"sourcesContent":["/**\n * Copyright Â© 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport type { RTCStats } from './';\nimport { NativeModule, NativeEventEmitter } from './common';\nimport { Constants } from './constants';\nimport type {\n  NativeCallEvent,\n  NativeCallEventType,\n  NativeCallInfo,\n} from './type/Call';\nimport type { CustomParameters, Uuid } from './type/common';\nimport type { TwilioError } from './error/TwilioError';\nimport { constructTwilioError } from './error/utility';\nimport { CallMessage } from './CallMessage';\nimport { OutgoingCallMessage } from './OutgoingCallMessage';\n\n/**\n * Defines strict typings for all events emitted by {@link (Call:class)\n * | Call objects}.\n *\n * @remarks\n * Note that the `on` function is an alias for the `addListener` function.\n * They share identical functionality and either may be used interchangeably.\n *\n * - See also the {@link (Call:class) | Call class}.\n * - See also the {@link (Call:namespace) | Call namespace}.\n *\n * @public\n */\nexport declare interface Call {\n  /**\n   * ------------\n   * Emit Typings\n   * ------------\n   */\n\n  /** @internal */\n  emit(connectedEvent: Call.Event.Connected): boolean;\n\n  /** @internal */\n  emit(\n    connectFailureEvent: Call.Event.ConnectFailure,\n    error: TwilioError\n  ): boolean;\n\n  /** @internal */\n  emit(reconnectingEvent: Call.Event.Reconnecting, error: TwilioError): boolean;\n\n  /** @internal */\n  emit(reconnectedEvent: Call.Event.Reconnected): boolean;\n\n  /** @internal */\n  emit(\n    disconnectedEvent: Call.Event.Disconnected,\n    error?: TwilioError\n  ): boolean;\n\n  /** @internal */\n  emit(ringingEvent: Call.Event.Ringing): boolean;\n\n  /** @internal */\n  emit(\n    qualityWarningsChangedEvent: Call.Event.QualityWarningsChanged,\n    currentQualityWarnings: Call.QualityWarning[],\n    previousQualityWarnings: Call.QualityWarning[]\n  ): boolean;\n\n  /** @internal */\n  emit(\n    messageReceivedEvent: Call.Event.MessageReceived,\n    callMessage: CallMessage\n  ): boolean;\n\n  /** @internal */\n  emit(callEvent: Call.Event, ...args: any[]): boolean;\n\n  /**\n   * ----------------\n   * Listener Typings\n   * ----------------\n   */\n\n  /**\n   * Connected event. Raised when the call has successfully connected.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.Connected, () => {\n   *   // call has been connected\n   * });\n   * ```\n   *\n   * @param connectedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    connectedEvent: Call.Event.Connected,\n    listener: Call.Listener.Connected\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:1)}\n   */\n  on(\n    connectedEvent: Call.Event.Connected,\n    listener: Call.Listener.Connected\n  ): this;\n\n  /**\n   * Connect failure event. Raised when the call has failed to connect.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.ConnectFailure, (error) => {\n   *   // call was unable to connect, handle error\n   * });\n   * ```\n   *\n   * @param connectFailureEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    connectFailureEvent: Call.Event.ConnectFailure,\n    listener: Call.Listener.ConnectFailure\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:2)}\n   */\n  on(\n    connectFailureEvent: Call.Event.ConnectFailure,\n    listener: Call.Listener.ConnectFailure\n  ): this;\n\n  /**\n   * Reconnecting event. Raised when the call is reconnecting.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.Reconnecting, (error) => {\n   *   // call is attempting to reconnect, handle error\n   * });\n   * ```\n   *\n   * @param reconnectingEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    reconnectingEvent: Call.Event.Reconnecting,\n    listener: Call.Listener.Reconnecting\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:3)}\n   */\n  on(\n    reconnectingEvent: Call.Event.Reconnecting,\n    listener: Call.Listener.Reconnecting\n  ): this;\n\n  /**\n   * Reconnected event. Raised when the call has recovered and reconnected.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.Reconnected, () => {\n   *   // call has reconnected\n   * });\n   * ```\n   *\n   * @param reconnectedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    reconnectedEvent: Call.Event.Reconnected,\n    listener: Call.Listener.Reconnected\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:4)}\n   */\n  on(\n    reconnectedEvent: Call.Event.Reconnected,\n    listener: Call.Listener.Reconnected\n  ): this;\n\n  /**\n   * Disconnected event. Raised when the call has disconnected.\n   *\n   * @remarks\n   * This event can occur in \"naturally\" disconnected calls and calls\n   * disconnected from issues such as network problems. If the SDK has detected\n   * an issue that has caused the call to disconnect, then the error parameter\n   * will be defined, otherwise it will be undefined.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.Disconnected, (error) => {\n   *   // call has disconnected\n   *   // if a natural disconnect occurred, then error is `undefined`\n   *   // if an unnatural disconnect occurred, then error is defined\n   * });\n   * ```\n   *\n   * @param disconnectedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    disconnectedEvent: Call.Event.Disconnected,\n    listener: Call.Listener.Disconnected\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:5)}\n   */\n  on(\n    disconnectedEvent: Call.Event.Disconnected,\n    listener: Call.Listener.Disconnected\n  ): this;\n\n  /**\n   * Ringing event. Raised when the call has begun to ring.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.Ringing, () => {\n   *   // call is ringing\n   * });\n   * ```\n   *\n   * @param ringingEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    ringingEvent: Call.Event.Ringing,\n    listener: Call.Listener.Ringing\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:6)}\n   */\n  on(ringingEvent: Call.Event.Ringing, listener: Call.Listener.Ringing): this;\n\n  /**\n   * Quality warnings changed event. Raised when a call quality warning is set\n   * or unset. All \"ongoing\" call quality warnings are passed to the invoked\n   * listener function.\n   *\n   * @example\n   * ```typescript\n   * call.addListener(\n   *   Call.Event.QualityWarningsChanged,\n   *   (\n   *      currentWarnings: Call.QualityWarning[],\n   *      previousWarnings: Call.QualityWarning[]\n   *   ) => {\n   *     // call quality warnings have changed\n   *   }\n   * );\n   * ```\n   *\n   * @param qualityWarningsChangedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    qualityWarningsChangedEvent: Call.Event.QualityWarningsChanged,\n    listener: Call.Listener.QualityWarningsChanged\n  ): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:7)}\n   */\n  on(\n    qualityWarningsChangedEvent: Call.Event.QualityWarningsChanged,\n    listener: Call.Listener.QualityWarningsChanged\n  ): this;\n\n  /**\n   * MessageReceived event. Raised when {@link (CallMessage:class)} is received.\n   * @example\n   * ```typescript\n   * call.addListener(Call.Event.MessageReceived, (message) => {\n   *    // callMessage received\n   * })\n   * ```\n   *\n   * @param messageReceivedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The callMessage object\n   */\n  addListener(\n    messageReceivedEvent: Call.Event.MessageReceived,\n    listener: Call.Listener.MessageReceived\n  ): this;\n  /** {@inheritDoc (Call:interface).(addListener:8)} */\n  on(\n    callMessageEvent: Call.Event.MessageReceived,\n    listener: Call.Listener.MessageReceived\n  ): this;\n\n  /**\n   * Generic event listener typings.\n   * @param callEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(callEvent: Call.Event, listener: Call.Listener.Generic): this;\n  /**\n   * {@inheritDoc (Call:interface).(addListener:9)}\n   */\n  on(callEvent: Call.Event, listener: Call.Listener.Generic): this;\n}\n\n/**\n * Provides access to information about a call, including the call parameters,\n * and exposes functionality for a call such as disconnecting, muting, and\n * holding.\n *\n * @remarks\n * Note that the call information is fetched as soon as possible from the native\n * layer, but there is no guarantee that all information is immediately\n * available. Methods such as `Call.getFrom()` or `Call.getTo()` may return\n * `undefined`.\n *\n * As call events are received from the native layer, call information will\n * propagate from the native layer to the JS layer and become available.\n * Therefore, it is good practice to read information from the call after an\n * event occurs, or as events occur.\n *\n *  - See the {@link (Call:namespace).Event} enum for events emitted by `Call`\n *    objects.\n *  - See the {@link (Call:interface) | Call interface} for overloaded event\n *    listening methods.\n *  - See the {@link (Call:namespace) | Call namespace} for types and\n *    enumerations used by this class.\n *\n * @public\n */\nexport class Call extends EventEmitter {\n  /**\n   * The `Uuid` of this call. Used to identify calls between the JS and native\n   * layer so we can associate events and native functionality between the\n   * layers.\n   */\n  private _uuid: Uuid;\n  /**\n   * Call custom parameters.\n   */\n  private _customParameters: CustomParameters;\n  /**\n   * Call `from` parameter.\n   */\n  private _from?: string;\n  /**\n   * Initial `connected` timestamp. Milliseconds since epoch.\n   */\n  private _initialConnectedTimestamp?: Date;\n  /**\n   * A boolean representing if the call is currently muted.\n   */\n  private _isMuted?: boolean;\n  /**\n   * A boolean representing if the call is currently on hold.\n   */\n  private _isOnHold?: boolean;\n  /**\n   * A string representing the SID of this call.\n   */\n  private _sid?: string;\n  /**\n   * The current state of the call.\n   *\n   * @remarks\n   * See {@link (Call:namespace).State}.\n   */\n  private _state: Call.State;\n  /**\n   * Call `to` parameter.\n   */\n  private _to?: string;\n\n  /**\n   * Handlers for native call events. Set upon construction so we can\n   * dynamically bind events to handlers.\n   *\n   * @privateRemarks\n   * This is done by the constructor so this mapping isn't made every time the\n   * {@link (Call:class)._handleNativeEvent} function is invoked.\n   */\n  private _nativeEventHandler: Record<\n    NativeCallEventType,\n    (callEvent: NativeCallEvent) => void\n  >;\n\n  /**\n   * Constructor for the {@link (Call:class) | Call class}. This should not be\n   * invoked by third-party code. All instances of the\n   * {@link (Call:class) | Call class} should be made by the SDK and emitted by\n   * {@link (Voice:class) | Voice objects}.\n   *\n   * @param nativeCallInfo - An object containing all of the data from the\n   * native layer necessary to fully describe a call, as well as invoke native\n   * functionality for the call.\n   *\n   * @internal\n   */\n  constructor({\n    uuid,\n    customParameters,\n    from,\n    sid,\n    state,\n    to,\n    isMuted,\n    isOnHold,\n    initialConnectedTimestamp,\n  }: NativeCallInfo) {\n    super();\n\n    this._uuid = uuid;\n    this._customParameters = { ...customParameters };\n    this._from = from;\n    this._sid = sid;\n    this._state = typeof state === 'string' ? state : Call.State.Connecting;\n    this._to = to;\n    this._isMuted = isMuted;\n    this._isOnHold = isOnHold;\n    this._initialConnectedTimestamp = initialConnectedTimestamp\n      ? new Date(initialConnectedTimestamp)\n      : undefined;\n\n    this._nativeEventHandler = {\n      /**\n       * Call State\n       */\n      [Constants.CallEventConnected]: this._handleConnectedEvent,\n      [Constants.CallEventConnectFailure]: this._handleConnectFailureEvent,\n      [Constants.CallEventDisconnected]: this._handleDisconnectedEvent,\n      [Constants.CallEventReconnected]: this._handleReconnectedEvent,\n      [Constants.CallEventReconnecting]: this._handleReconnectingEvent,\n      [Constants.CallEventRinging]: this._handleRingingEvent,\n\n      /**\n       * Call Quality\n       */\n      [Constants.CallEventQualityWarningsChanged]:\n        this._handleQualityWarningsChangedEvent,\n\n      /**\n       * Call Message\n       */\n      [Constants.CallEventMessageReceived]: this._handleMessageReceivedEvent,\n    };\n\n    NativeEventEmitter.addListener(\n      Constants.ScopeCall,\n      this._handleNativeEvent\n    );\n  }\n\n  /**\n   * This intermediate native call event handler acts as a \"gate\", only\n   * executing the actual call event handler (such as `Connected`) if this call\n   * object matches the `Uuid` of the call that had an event raised.\n   * @param nativeCallEvent - A call event directly from the native layer.\n   */\n  private _handleNativeEvent = (nativeCallEvent: NativeCallEvent) => {\n    const { type, call: callInfo } = nativeCallEvent;\n\n    const handler = this._nativeEventHandler[type];\n    if (typeof handler === 'undefined') {\n      throw new Error(\n        `Unknown call event type received from the native layer: \"${type}\".`\n      );\n    }\n\n    if (callInfo.uuid === this._uuid) {\n      handler(nativeCallEvent);\n    }\n  };\n\n  /**\n   * Helper function to update the state of the call when a call event occurs\n   * that necessitates an update, i.e. upon a\n   * {@link (Call:namespace).Event.Connected | Connected event} we want to\n   * update the state of the call to also reflect the\n   * {@link (Call:namespace).State.Connected | Connected state}.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _update({\n    type,\n    call: { from, initialConnectedTimestamp, sid, to },\n  }: NativeCallEvent) {\n    const newState = Call.EventTypeStateMap[type];\n    if (typeof newState === 'string') {\n      this._state = newState;\n    }\n    this._from = from;\n    this._initialConnectedTimestamp = initialConnectedTimestamp\n      ? new Date(initialConnectedTimestamp)\n      : undefined;\n    this._sid = sid;\n    this._to = to;\n  }\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.Connected} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleConnectedEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventConnected) {\n      throw new Error(\n        'Incorrect \"call#connected\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    this.emit(Call.Event.Connected);\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.ConnectFailure} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleConnectFailureEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventConnectFailure) {\n      throw new Error(\n        'Incorrect \"call#connectFailure\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    const { message, code } = nativeCallEvent.error;\n    const error = constructTwilioError(message, code);\n    this.emit(Call.Event.ConnectFailure, error);\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.Disconnected} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleDisconnectedEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventDisconnected) {\n      throw new Error(\n        'Incorrect \"call#disconnected\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    if (nativeCallEvent.error) {\n      const { message, code } = nativeCallEvent.error;\n      const error = constructTwilioError(message, code);\n      this.emit(Call.Event.Disconnected, error);\n    } else {\n      this.emit(Call.Event.Disconnected);\n    }\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.Reconnecting} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleReconnectingEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventReconnecting) {\n      throw new Error(\n        'Incorrect \"call#reconnecting\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    const { message, code } = nativeCallEvent.error;\n    const error = constructTwilioError(message, code);\n    this.emit(Call.Event.Reconnecting, error);\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.Reconnected} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleReconnectedEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventReconnected) {\n      throw new Error(\n        'Incorrect \"call#reconnected\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    this.emit(Call.Event.Reconnected);\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.Ringing} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleRingingEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventRinging) {\n      throw new Error(\n        'Incorrect \"call#ringing\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    this.emit(Call.Event.Ringing);\n  };\n\n  /**\n   * Handler for the the {@link (Call:namespace).Event.QualityWarningsChanged}\n   * event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleQualityWarningsChangedEvent = (\n    nativeCallEvent: NativeCallEvent\n  ) => {\n    if (nativeCallEvent.type !== Constants.CallEventQualityWarningsChanged) {\n      throw new Error(\n        'Incorrect \"call#qualityWarnings\" handler called for type ' +\n          `\"${nativeCallEvent.type}\".`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    const { currentWarnings, previousWarnings } = nativeCallEvent;\n\n    this.emit(\n      Call.Event.QualityWarningsChanged,\n      currentWarnings as Call.QualityWarning[],\n      previousWarnings as Call.QualityWarning[]\n    );\n  };\n\n  /**\n   * Handler for the {@link (Call:namespace).Event.MessageReceived} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleMessageReceivedEvent = (nativeCallEvent: NativeCallEvent) => {\n    if (nativeCallEvent.type !== Constants.CallEventMessageReceived) {\n      throw new Error(\n        'Incorrect \"call#Received\" handler called for type' +\n          `\"${nativeCallEvent.type}`\n      );\n    }\n\n    this._update(nativeCallEvent);\n\n    const { callMessage: callMessageInfo } = nativeCallEvent;\n\n    const callMessage = new CallMessage(callMessageInfo);\n\n    this.emit(Call.Event.MessageReceived, callMessage);\n  };\n\n  /**\n   * Disconnect this side of the call.\n   * @returns\n   *  A `Promise` that\n   *    - Resolves when the call has disconnected.\n   *    - Rejects if the native layer cannot disconnect the call.\n   */\n  disconnect(): Promise<void> {\n    return NativeModule.call_disconnect(this._uuid);\n  }\n\n  /**\n   * Get the mute status of this side of the call.\n   * @returns\n   *  - A boolean representing the muted status of the call.\n   *  - `undefined` if the call state has not yet been received from the native\n   *    layer.\n   */\n  isMuted(): boolean | undefined {\n    return this._isMuted;\n  }\n\n  /**\n   * Get the hold status of this side of the call.\n   * @returns\n   *  - A boolean representing the hold status of the call.\n   *  - `undefined` if the call state has not yet been received from the native\n   *    layer.\n   */\n  isOnHold(): boolean | undefined {\n    return this._isOnHold;\n  }\n\n  /**\n   * Return a `Record` of custom parameters given to this call.\n   * @returns\n   *   - A `Record` of custom parameters.\n   */\n  getCustomParameters(): CustomParameters {\n    return this._customParameters;\n  }\n\n  /**\n   * Get the value of the `from` parameter given to this call.\n   * @returns\n   *  - A `String` representing the `from` parameter.\n   *  - `undefined` if the call information has not yet been received from the\n   *    native layer.\n   */\n  getFrom(): string | undefined {\n    return this._from;\n  }\n\n  /**\n   * Get the timestamp (milliseconds since epoch) of the call connected event.\n   * @returns\n   *  - A `number` representing the timestamp.\n   *  - `undefined` if the call has not yet connected.\n   */\n  getInitialConnectedTimestamp(): Date | undefined {\n    return this._initialConnectedTimestamp;\n  }\n\n  /**\n   * Get the call `SID`.\n   * @returns\n   *  - A `String` representing the `SID` of the call.\n   *  - `undefined` if the call information has not yet been received from the\n   *    native layer.\n   */\n  getSid(): string | undefined {\n    return this._sid;\n  }\n\n  /**\n   * Get the state of the call object, such as {@link (Call:namespace).State.Connected} or\n   * {@link (Call:namespace).State.Disconnected}.\n   * @returns\n   *  - A {@link (Call:namespace).State}.\n   */\n  getState(): Call.State {\n    return this._state;\n  }\n\n  /**\n   * Gets the `PeerConnection` `WebRTC` stats for the ongoing call.\n   * @returns\n   *  A `Promise` that\n   *    - Resolves with a {@link RTCStats.StatsReport} object representing the\n   *      `WebRTC` `PeerConnection` stats of a call.\n   *    - Rejects when a {@link RTCStats.StatsReport} cannot be generated for a\n   *      call.\n   */\n  getStats(): Promise<RTCStats.StatsReport> {\n    return NativeModule.call_getStats(this._uuid);\n  }\n\n  /**\n   * Get the value of the `to` parameter given to this call.\n   * @returns\n   *  - A `String` representing the `to` parameter.\n   *  - `undefined` if the call information has not yet been received from the\n   *    native layer.\n   */\n  getTo(): string | undefined {\n    return this._to;\n  }\n\n  /**\n   * Put this end of the call on hold or not on hold.\n   *\n   * @example\n   * To put a call on hold\n   * ```typescript\n   * call.hold(true);\n   * ```\n   * @example\n   * To take a call off hold\n   * ```typescript\n   * call.hold(false);\n   * ```\n   *\n   * @param hold - A `boolean` representing whether or not to put this end of\n   *  the call on hold.\n   *\n   * @returns\n   *  A `Promise` that\n   *    - Resolves with the hold status when the call is put on hold or not on\n   *      hold.\n   *    - Rejects when the call is not able to be put on hold or not on hold.\n   */\n  async hold(hold: boolean): Promise<boolean> {\n    this._isOnHold = await NativeModule.call_hold(this._uuid, hold);\n    return this._isOnHold;\n  }\n\n  /**\n   * Mute or unmute this end of the call.\n   *\n   * @example\n   * To mute a call\n   * ```typescript\n   * call.mute(true);\n   * ```\n   *\n   * @example\n   * To unmute a call\n   * ```typescript\n   * call.mute(false);\n   * ```\n   *\n   * @param mute - A `boolean` representing whether or not to mute this end of\n   *  the call.\n   *\n   * @returns\n   *  A `Promise` that\n   *    - Resolves with the muted status of the call when the call is muted or\n   *      unmuted.\n   *    - Rejects when the call is not able to be muted or unmuted.\n   */\n  async mute(mute: boolean): Promise<boolean> {\n    this._isMuted = await NativeModule.call_mute(this._uuid, mute);\n    return this._isMuted;\n  }\n\n  /**\n   * Send DTMF digits.\n   *\n   * @example\n   * To send the `0` dialtone:\n   * ```typescript\n   * call.sendDigits('0');\n   * ```\n   *\n   * @example\n   * To send the `0` and then `1` dialtone:\n   * ```typescript\n   * call.sendDigits('01');\n   * ```\n   *\n   * @param digits - A sequence of DTMF digits in a string.\n   *\n   * @returns\n   *  A `Promise` that\n   *    - Resolves when the DTMF digits have been sent.\n   *    - Rejects when DTMF tones are not able to be sent.\n   */\n  sendDigits(digits: string): Promise<void> {\n    return NativeModule.call_sendDigits(this._uuid, digits);\n  }\n\n  /**\n   * Send {@link (CallMessage:class)}.\n   *\n   * @example\n   * To send a user-defined-message\n   * ```typescript\n   * const message = new CallMessage({\n   *    content: { key1: 'This is a messsage from the parent call' },\n   *    contentType: CallMessage.ContentType.ApplicationJson,\n   *    messageType: CallMessage.MessageType.UserDefinedMessage\n   * })\n   * const outgoingCallMessage: OutgoingCallMessage = await call.sendMessage(message)\n   *\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Failure, (error) => {\n   *    // outgoingCallMessage failed, handle error\n   * });\n   *\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Sent, () => {\n   *    // outgoingCallMessage sent\n   * })\n   * ```\n   *\n   * @param content - The message content\n   * @param contentType - The MIME type for the message. See {@link (CallMessage:namespace).ContentType}.\n   * @param messageType - The message type. See {@link (CallMessage:namespace).MessageType}.\n   *\n   * @returns\n   *  A `Promise` that\n   *    - Resolves with the OutgoingCallMessage object.\n   *    - Rejects when the message is unable to be sent.\n   */\n  async sendMessage(message: CallMessage): Promise<OutgoingCallMessage> {\n    const content = message.getContent();\n    const contentType = message.getContentType();\n    const messageType = message.getMessageType();\n\n    const voiceEventSid = await NativeModule.call_sendMessage(\n      this._uuid,\n      JSON.stringify(content),\n      contentType,\n      messageType\n    );\n\n    const outgoingCallMessage = new OutgoingCallMessage({\n      content,\n      contentType,\n      messageType,\n      voiceEventSid,\n    });\n\n    return outgoingCallMessage;\n  }\n\n  /**\n   * Post feedback about a call.\n   *\n   * @example\n   * To report that a call had very significant audio latency:\n   * ```typescript\n   * call.postFeedback(Call.Score.Five, Call.Issue.AudioLatency);\n   * ```\n   *\n   * @param score - A score representing the serverity of the issue being\n   * reported.\n   * @param issue - The issue being reported.\n   * @returns\n   *  A `Promise` that\n   *    - Resolves when the feedback has been posted.\n   *    - Rejects when the feedback is unable to be sent.\n   */\n  postFeedback(score: Call.Score, issue: Call.Issue): Promise<void> {\n    return NativeModule.call_postFeedback(this._uuid, score, issue);\n  }\n}\n\n/**\n * Namespace for enumerations and types used by\n * {@link (Call:class) | Call objects}.\n *\n * @remarks\n *  - See also the {@link (Call:class) | Call class}.\n *  - See also the {@link (Call:interface) | Call interface}.\n *\n * @public\n */\nexport namespace Call {\n  /**\n   * Enumeration of all event strings emitted by {@link (Call:class)} objects.\n   */\n  export enum Event {\n    /**\n     * Event string for the `Connected` event.\n     * See {@link (Call:interface).(addListener:1)}.\n     */\n    'Connected' = 'connected',\n\n    /**\n     * Event string for the `ConnectedFailure` event.\n     * See {@link (Call:interface).(addListener:2)}.\n     */\n    'ConnectFailure' = 'connectFailure',\n\n    /**\n     * Event string for the `Reconnecting` event.\n     * See {@link (Call:interface).(addListener:3)}.\n     */\n    'Reconnecting' = 'reconnecting',\n\n    /**\n     * Event string for the `Reconnected` event.\n     * See {@link (Call:interface).(addListener:4)}.\n     */\n    'Reconnected' = 'reconnected',\n\n    /**\n     * Event string for the `Disconnected` event.\n     * See {@link (Call:interface).(addListener:5)}.\n     */\n    'Disconnected' = 'disconnected',\n\n    /**\n     * Event string for the `Ringing` event.\n     * See {@link (Call:interface).(addListener:6)}.\n     */\n    'Ringing' = 'ringing',\n\n    /**\n     * Event string for the `QualityWarningsChanged` event.\n     * See {@link (Call:interface).(addListener:7)}.\n     */\n    'QualityWarningsChanged' = 'qualityWarningsChanged',\n\n    /**\n     * Event string for the `MessageReceived` event.\n     * See {@link (Call:interface).(addListener:8)}\n     */\n    'MessageReceived' = 'messageReceived',\n  }\n\n  /**\n   * An enumeration of all possible {@link (Call:class) | Call object} states.\n   */\n  export enum State {\n    /**\n     * Call `Connected` state.\n     *\n     * Occurs when the `Connected` and `Reconnected` event is raised.\n     *\n     * @remarks\n     *\n     * See {@link (Call:interface).(addListener:1)}.\n     *\n     * See {@link (Call:interface).(addListener:4)}.\n     */\n    'Connected' = Constants.CallStateConnected,\n\n    /**\n     * Call `Connecting` state.\n     *\n     * The default state of an outgoing call.\n     */\n    'Connecting' = Constants.CallStateConnecting,\n\n    /**\n     * Call `Disconnected` state.\n     *\n     * Occurs when the `Disconnected` or `ConnectFailure` event is raised.\n     *\n     * @remarks\n     *\n     * See {@link (Call:interface).(addListener:5)}.\n     *\n     * See {@link (Call:interface).(addListener:2)}.\n     */\n    'Disconnected' = Constants.CallStateDisconnected,\n\n    /**\n     * Call `Reconnecting` state.\n     *\n     * Occurs when the `Reconnecting` event is raised.\n     *\n     * @remarks\n     *\n     * See {@link (Call:interface).(addListener:3)}.\n     */\n    'Reconnecting' = Constants.CallStateReconnecting,\n\n    /**\n     * Call `Ringing` state. Occurs when the `Ringing` event is raised.\n     *\n     * @remarks\n     *\n     * See {@link (Call:interface).(addListener:6)}.\n     */\n    'Ringing' = Constants.CallStateRinging,\n  }\n\n  /**\n   * Mapping of {@link (Call:namespace).Event | Call events} to\n   * {@link (Call:namespace).State | Call states}.\n   *\n   * @remarks\n   * Note that this mapping is not a 1:1 bijection. Not every event coming from\n   * the native layer has a relevant state, and some events share a state.\n   * Therefore, this `Record` needs to be marked as `Partial` and\n   * undefined-checking logic is needed when using this mapping.\n   *\n   * @internal\n   */\n  export const EventTypeStateMap: Partial<\n    Record<NativeCallEventType, Call.State>\n  > = {\n    [Constants.CallEventConnected]: Call.State.Connected,\n    [Constants.CallEventConnectFailure]: Call.State.Disconnected,\n    [Constants.CallEventDisconnected]: Call.State.Disconnected,\n    [Constants.CallEventReconnecting]: Call.State.Reconnecting,\n    [Constants.CallEventReconnected]: Call.State.Connected,\n    [Constants.CallEventRinging]: Call.State.Ringing,\n  };\n\n  /**\n   * An enumeration of all call quality-warning types.\n   */\n  export enum QualityWarning {\n    /**\n     * Raised when the call detects constant audio input, such as silence.\n     */\n    ConstantAudioInputLevel = 'constant-audio-input-level',\n    /**\n     * Raised when the network encounters high jitter.\n     */\n    HighJitter = 'high-jitter',\n    /**\n     * Raised when the network encounters high packet loss.\n     */\n    HighPacketLoss = 'high-packet-loss',\n    /**\n     * Raised when the network encounters high packet round-trip-time.\n     */\n    HighRtt = 'high-rtt',\n    /**\n     * Raised when the call detects a low mean-opinion-score or MOS.\n     */\n    LowMos = 'low-mos',\n  }\n\n  /**\n   * An enumeration of all scores that could be used to rate the experience of\n   * a call or issues encountered during the call.\n   */\n  export enum Score {\n    /**\n     * An issue was not encountered or there is no desire to report said issue.\n     */\n    NotReported = 0,\n    /**\n     * An issue had severity approximately 1/5.\n     */\n    One = 1,\n    /**\n     * An issue had severity approximately 2/5.\n     */\n    Two = 2,\n    /**\n     * An issue had severity approximately 3/5.\n     */\n    Three = 3,\n    /**\n     * An issue had severity approximately 4/5.\n     */\n    Four = 4,\n    /**\n     * An issue had severity approximately 5/5.\n     */\n    Five = 5,\n  }\n\n  /**\n   * An enumeration of call issues that can be reported.\n   */\n  export enum Issue {\n    /**\n     * No issue is reported.\n     */\n    NotReported = 'not-reported',\n    /**\n     * The call was dropped unexpectedly.\n     */\n    DroppedCall = 'dropped-call',\n    /**\n     * The call encountered significant audio latency.\n     */\n    AudioLatency = 'audio-latency',\n    /**\n     * One party of the call could not hear the other callee.\n     */\n    OneWayAudio = 'one-way-audio',\n    /**\n     * Call audio was choppy.\n     */\n    ChoppyAudio = 'choppy-audio',\n    /**\n     * Call audio had significant noise.\n     */\n    NoisyCall = 'noisy-call',\n    /**\n     * Call audio had significant echo.\n     */\n    Echo = 'echo',\n  }\n\n  /**\n   * Listener types for all events emitted by a\n   * {@link (Call:class) | Call object.}\n   */\n  export namespace Listener {\n    /**\n     * Connected event listener. This should be the function signature of any\n     * event listener bound to the {@link (Call:namespace).Event.Connected}\n     * event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:1)}.\n     */\n    export type Connected = () => void;\n\n    /**\n     * Connect failure event listener. This should be the function signature of\n     * any event listener bound to the\n     * {@link (Call:namespace).Event.ConnectFailure} event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:2)}.\n     *\n     * See {@link TwilioErrors} for all error classes.\n     */\n    export type ConnectFailure = (error: TwilioError) => void;\n\n    /**\n     * Reconnecting event listener. This should be the function signature of any\n     * event listener bound to the {@link (Call:namespace).Event.Reconnecting}\n     * event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:3)}.\n     *\n     * See {@link TwilioErrors} for all error classes.\n     */\n    export type Reconnecting = (error: TwilioError) => void;\n\n    /**\n     * Reconnected event listener. This should be the function signature of any\n     * event listener bound to the {@link (Call:namespace).Event.Reconnected}\n     * event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:4)}.\n     */\n    export type Reconnected = () => void;\n\n    /**\n     * Disconnected event listener. This should be the function signature of any\n     * event listener bound to the {@link (Call:namespace).Event.Disconnected}\n     * event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:5)}.\n     *\n     * See {@link TwilioErrors} for all error classes.\n     */\n    export type Disconnected = (error?: TwilioError) => void;\n\n    /**\n     * Ringing event listener. This should be the function signature of any\n     * event listener bound to the {@link (Call:namespace).Event.Ringing} event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:6)}.\n     */\n    export type Ringing = () => void;\n\n    /**\n     * Quality warnings changed event listener. This should be the function\n     * signature of any event listener bound to the\n     * {@link (Call:namespace).Event.QualityWarningsChanged} event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:7)}.\n     */\n    export type QualityWarningsChanged = (\n      currentQualityWarnings: Call.QualityWarning[],\n      previousQualityWarnings: Call.QualityWarning[]\n    ) => void;\n\n    /**\n     * CallMessage received event listener. This should be the function signature of\n     * any event listener bound to the {@link (Call:namespace).Event.MessageReceived} event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:8)}.\n     */\n    export type MessageReceived = (callMessage: CallMessage) => void;\n\n    /**\n     * Generic event listener. This should be the function signature of any\n     * event listener bound to any call event.\n     *\n     * @remarks\n     * See {@link (Call:interface).(addListener:9)}.\n     */\n    export type Generic = (...args: any[]) => void;\n  }\n}\n"],"mappings":"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MAAMA,CAAA,EAAuB;IAC3B,OAAO,IAAI,CAAC9B,IAAI;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE+B,QAAQA,CAAA,EAAe;IACrB,OAAO,IAAI,CAAC9B,MAAM;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE+B,QAAQA,CAAA,EAAkC;IACxC,OAAOP,oBAAY,CAACQ,aAAa,CAAC,IAAI,CAACjE,KAAK,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEkE,KAAKA,CAAA,EAAuB;IAC1B,OAAO,IAAI,CAAC9B,GAAG;EACjB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM+B,IAAIA,CAACA,IAAa,EAAoB;IAC1C,IAAI,CAAC7B,SAAS,GAAG,MAAMmB,oBAAY,CAACW,SAAS,CAAC,IAAI,CAACpE,KAAK,EAAEmE,IAAI,CAAC;IAC/D,OAAO,IAAI,CAAC7B,SAAS;EACvB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM+B,IAAIA,CAACA,IAAa,EAAoB;IAC1C,IAAI,CAAChC,QAAQ,GAAG,MAAMoB,oBAAY,CAACa,SAAS,CAAC,IAAI,CAACtE,KAAK,EAAEqE,IAAI,CAAC;IAC9D,OAAO,IAAI,CAAChC,QAAQ;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEkC,UAAUA,CAACC,MAAc,EAAiB;IACxC,OAAOf,oBAAY,CAACgB,eAAe,CAAC,IAAI,CAACzE,KAAK,EAAEwE,MAAM,CAAC;EACzD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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"}