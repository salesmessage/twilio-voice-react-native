"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AudioDevice = void 0;
var _common = require("./common");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Copyright Â© 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio
 * license.
 *
 * See LICENSE in the project root for license information.
 */
/**
 * Describes audio devices as reported by the native layer and allows the
 * native selection of the described audio device.
 *
 * @remarks
 * To fetch a list of available audio devices and the currently selected audio
 * device, see {@link (Voice:class).getAudioDevices}.
 *
 *  - See also the {@link (AudioDevice:namespace) | AudioDevice namespace} for
 *    types used by this class.
 *
 * @public
 */
class AudioDevice {
  /**
   * Audio device class constructor.
   * @param audioDeviceInformation - A record describing an audio device.
   *
   * @internal
   */
  constructor({
    uuid,
    type,
    name
  }) {
    /**
     * The native-UUID of this object. This is generated by the native layer and
     * is used to associate functionality between the JS and native layers.
     *
     * @internal
     */
    _defineProperty(this, "uuid", void 0);
    /**
     * The type of the audio device.
     */
    _defineProperty(this, "type", void 0);
    /**
     * The name of the audio device.
     */
    _defineProperty(this, "name", void 0);
    this.uuid = uuid;
    this.type = type;
    this.name = name;
  }

  /**
   * Calling this method will select this audio device as the active audio
   * device.
   * @returns
   *  A `Promise` that
   *    - Resolves with `void` when the audio device has been successfully
   *      selected as the active audio device.
   *    - Rejects if the audio device cannot be selected.
   */
  select() {
    return _common.NativeModule.voice_selectAudioDevice(this.uuid);
  }
}

/**
 * Contains interfaces and enumerations associated with audio devices.
 *
 * @remarks
 *  - See also the {@link (AudioDevice:class) | AudioDevice class}.
 *
 * @public
 */
exports.AudioDevice = AudioDevice;
(function (_AudioDevice2) {
  let Type = /*#__PURE__*/function (Type) {
    Type["Earpiece"] = "earpiece";
    Type["Speaker"] = "speaker";
    Type["Bluetooth"] = "bluetooth";
    return Type;
  }({});
  _AudioDevice2.Type = Type;
})(AudioDevice || (exports.AudioDevice = AudioDevice = {}));
//# sourceMappingURL=AudioDevice.js.map