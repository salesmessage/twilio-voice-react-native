{"version":3,"names":["_eventemitter","require","_Call","_common","_InvalidStateError","_TwilioError","_UnsupportedPlatformError","_utility","_CallMessage","_OutgoingCallMessage","_constants","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","TypeError","Number","CallInvite","EventEmitter","constructor","uuid","callSid","customParameters","from","to","state","nativeCallInviteEvent","TwilioError","_callSid","type","Constants","CallInviteEventTypeValueAccepted","_handleCallInviteAccepted","CallInviteEventTypeValueRejected","_handleCallInviteRejected","CallInviteEventTypeValueCancelled","_handleCallInviteCancelled","CallInviteEventTypeValueNotificationTapped","_handleCallInviteNotificationTapped","CallEventMessageReceived","_handleMessageReceivedEvent","_handleUnexpectedCallInviteEventType","callMessage","callMessageInfo","CallMessage","emit","Event","MessageReceived","callInvite","_state","State","Accepted","callInfo","sid","Call","Rejected","nativeCallInviteCancelledEvent","Cancelled","error","constructTwilioError","message","code","undefined","NotificationTapped","_uuid","_customParameters","_from","_to","NativeEventEmitter","addListener","ScopeCallInvite","_handleNativeCallInviteEvent","event","accept","options","Pending","InvalidStateError","NativeModule","callInvite_accept","reject","callInvite_reject","isValid","callInvite_isValid","getCallSid","getCustomParameters","getFrom","getState","getTo","sendMessage","content","getContent","contentType","getContentType","messageType","getMessageType","voiceEventSid","call_sendMessage","JSON","stringify","outgoingCallMessage","OutgoingCallMessage","updateCallerHandle","newHandle","Platform","OS","callInvite_updateCallerHandle","UnsupportedPlatformError","exports","_CallInvite2"],"sources":["CallInvite.tsx"],"sourcesContent":["/**\n * Copyright Â© 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport { Call } from './Call';\nimport { NativeEventEmitter, NativeModule, Platform } from './common';\nimport { InvalidStateError } from './error/InvalidStateError';\nimport { TwilioError } from './error/TwilioError';\nimport { UnsupportedPlatformError } from './error/UnsupportedPlatformError';\nimport { constructTwilioError } from './error/utility';\nimport type {\n  NativeCallInviteInfo,\n  NativeCallInviteEvent,\n  NativeCallInviteAcceptedEvent,\n  NativeCallInviteCancelledEvent,\n  NativeCallInviteMessageReceivedEvent,\n} from './type/CallInvite';\nimport type { CustomParameters, Uuid } from './type/common';\nimport { CallMessage } from './CallMessage';\nimport { OutgoingCallMessage } from './OutgoingCallMessage';\nimport { Constants } from './constants';\n\n/**\n * Defines strict typings for all events emitted by {@link (CallInvite:class)\n * | CallInvite objects}.\n *\n * @remarks\n * Note that the `on` function is an alias for the `addListener` function.\n * They share identical functionality and either may be used interchangeably.\n *\n * - See also the {@link (CallInvite:class) | CallInvite class}.\n * - See also the {@link (CallInvite:namespace) | CallInvite namespace}.\n *\n * @public\n */\nexport declare interface CallInvite {\n  /**\n   * ------------\n   * Emit Typings\n   * ------------\n   */\n\n  /** @internal */\n  emit(acceptedEvent: CallInvite.Event.Accepted, call: Call): boolean;\n\n  /** @internal */\n  emit(rejectedEvent: CallInvite.Event.Rejected): boolean;\n\n  /** @internal */\n  emit(\n    cancelledEvent: CallInvite.Event.Cancelled,\n    error?: TwilioError\n  ): boolean;\n\n  /** @internal */\n  emit(notificationTappedEvent: CallInvite.Event.NotificationTapped): boolean;\n\n  /** @internal */\n  emit(\n    messageReceivedEvent: CallInvite.Event.MessageReceived,\n    callMessage: CallMessage\n  ): boolean;\n\n  /**\n   * ----------------\n   * Listener Typings\n   * ----------------\n   */\n\n  /**\n   * Accepted event. Raised when the call invite has been accepted.\n   *\n   * @example\n   * ```ts\n   * voice.on(Voice.Event.CallInvite, (callInvite) => {\n   *   callInvite.on(CallInvite.Event.Accepted, (call) => {\n   *     // the call invite was accepted through either the native layer\n   *     // or the js layer\n   *   });\n   * });\n   * ```\n   *\n   * @remarks\n   *\n   * @param acceptedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call invite object.\n   */\n  addListener(\n    acceptedEvent: CallInvite.Event.Accepted,\n    listener: CallInvite.Listener.Accepted\n  ): this;\n  /** {@inheritDoc (CallInvite:interface).(addListener:1)} */\n  on(\n    acceptedEvent: CallInvite.Event.Accepted,\n    listener: CallInvite.Listener.Accepted\n  ): this;\n\n  /**\n   * Rejected event. Raised when the call invite has been rejected.\n   *\n   * @example\n   * ```ts\n   * voice.on(Voice.Event.CallInvite, (callInvite) => {\n   *   callInvite.on(CallInvite.Event.Rejected, () => {\n   *     // the call invite was rejected through either the native layer\n   *     // or the js layer\n   *   });\n   * });\n   * ```\n   *\n   * @remarks\n   *\n   * @param rejectedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call invite object.\n   */\n  addListener(\n    rejectedEvent: CallInvite.Event.Rejected,\n    listener: CallInvite.Listener.Rejected\n  ): this;\n  /** {@inheritDoc (CallInvite:interface).(addListener:2)} */\n  on(\n    rejectedEvent: CallInvite.Event.Rejected,\n    listener: CallInvite.Listener.Rejected\n  ): this;\n\n  /**\n   * Cancelled event. Raised when the call invite has been cancelled.\n   *\n   * @example\n   * ```ts\n   * voice.on(Voice.Event.CallInvite, (callInvite) => {\n   *   callInvite.on(CallInvite.Event.Cancelled, (error) => {\n   *     // the call invite was cancelled\n   *   });\n   * });\n   * ```\n   *\n   * @remarks\n   *\n   * @param cancelledEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call invite object.\n   */\n  addListener(\n    cancelledEvent: CallInvite.Event.Cancelled,\n    listener: CallInvite.Listener.Cancelled\n  ): this;\n  /** {@inheritDoc (CallInvite:interface).(addListener:3)} */\n  on(\n    cancelledEvent: CallInvite.Event.Cancelled,\n    listener: CallInvite.Listener.Cancelled\n  ): this;\n\n  /**\n   * Notification tapped event. Raised when the call invite notification has\n   * been tapped.\n   *\n   * @example\n   * ```ts\n   * voice.on(Voice.Event.CallInvite, (callInvite) => {\n   *   callInvite.on(CallInvite.Event.NotificationTapped, () => {\n   *     // the call invite notification was tapped\n   *   });\n   * });\n   * ```\n   *\n   * @remarks\n   * This API is Android specific.\n   *\n   * @param notificationTappedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call invite object.\n   */\n  addListener(\n    notificationTappedEvent: CallInvite.Event.NotificationTapped,\n    listener: CallInvite.Listener.NotificationTapped\n  ): this;\n  /** {@inheritDoc (CallInvite:interface).(addListener:4)} */\n  on(\n    notificationTappedEvent: CallInvite.Event.NotificationTapped,\n    listener: CallInvite.Listener.NotificationTapped\n  ): this;\n\n  /**\n   * MessageReceived event. Raised when {@link (CallMessage:class)} is received.\n   * @example\n   * ```typescript\n   * voice.on(Voice.Event.CallInvite, (callInvite) => {\n   *   callInvite.addListener(CallInvite.Event.MessageReceived, (message) => {\n   *      // callMessage received\n   *   });\n   * });\n   * ```\n   *\n   * @param messageReceivedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The callMessage object\n   */\n  addListener(\n    messageReceivedEvent: CallInvite.Event.MessageReceived,\n    listener: CallInvite.Listener.MessageReceived\n  ): this;\n  /** {@inheritDoc (CallInvite:interface).(addListener:5)} */\n  on(\n    messageReceivedEvent: CallInvite.Event.MessageReceived,\n    listener: CallInvite.Listener.MessageReceived\n  ): this;\n}\n\n/**\n * Provides access to information about a call invite, including the call\n * parameters, and exposes functionality to accept or decline a call.\n *\n * @remarks\n *\n * Note that when a `CallInvite` is acted upon (i.e. when\n * {@link (CallInvite:class).accept} or {@link (CallInvite:class).reject} is\n * invoked), then the `CallInvite` is \"settled\".\n *\n * The state of the `CallInvite` is changed from\n * {@link (CallInvite:namespace).State.Pending} to\n * {@link (CallInvite:namespace).State.Accepted} or\n * {@link (CallInvite:namespace).State.Rejected} and the `CallInvite` can no\n * longer be acted upon further.\n *\n * Further action after \"settling\" a `CallInvite` will throw an error.\n *\n *  - See the {@link (CallInvite:namespace) | CallInvite namespace} for\n *    enumerations and types used by this class.\n *\n * @public\n */\nexport class CallInvite extends EventEmitter {\n  /**\n   * The current state of the call invite.\n   *\n   * @remarks\n   * See {@link (CallInvite:namespace).State}.\n   */\n  private _state: CallInvite.State;\n  /**\n   * The `Uuid` of this call invite. Used to identify calls between the JS and\n   * native layer so we can associate events and native functionality between\n   * the layers.\n   */\n  private _uuid: Uuid;\n  /**\n   * A string representing the SID of this call.\n   */\n  private _callSid: string;\n  /**\n   * Call custom parameters.\n   */\n  private _customParameters: CustomParameters;\n  /**\n   * Call `from` parameter.\n   */\n  private _from: string;\n  /**\n   * Call `to` parameter.\n   */\n  private _to: string;\n\n  /**\n   * These objects should not be instantiated by consumers of the SDK. All\n   * instances of the `CallInvite` class should be emitted by the SDK.\n   *\n   * @param nativeCallInviteInfo - A dataobject containing the native\n   * information of a call invite.\n   * @param state - Mocking options for testing.\n   *\n   * @internal\n   */\n  constructor(\n    { uuid, callSid, customParameters, from, to }: NativeCallInviteInfo,\n    state: CallInvite.State\n  ) {\n    super();\n\n    this._uuid = uuid;\n    this._callSid = callSid;\n    this._customParameters = { ...customParameters };\n    this._from = from;\n    this._to = to;\n\n    this._state = state;\n\n    NativeEventEmitter.addListener(\n      Constants.ScopeCallInvite,\n      this._handleNativeCallInviteEvent\n    );\n  }\n\n  /**\n   * This helper function serves as both a runtime-check error log and a\n   * compile-time type-guard. If the switch-case statement below is non-\n   * exhaustive, then the type passed to this function will _not_ have type\n   * `never`.\n   */\n  private _handleUnexpectedCallInviteEventType(event: never) {\n    throw new TwilioError(\n      `Unknown event type \"${(event as any)?.type}\" reached call invite.`\n    );\n  }\n\n  /**\n   * This intermediate native call invite event handler acts as a \"gate\", only\n   * executing the actual call invite event handler (such as `Accepted`) if\n   * this call invite object matches the `Uuid` of the call invite that had an\n   * event raised.\n   * @param nativeCallInviteEvent - A call invite event directly from the native\n   * layer.\n   */\n  private _handleNativeCallInviteEvent = (\n    nativeCallInviteEvent: NativeCallInviteEvent\n  ) => {\n    if (typeof nativeCallInviteEvent !== 'object') {\n      throw new TwilioError(\n        `Received a \"${typeof nativeCallInviteEvent}\" native call invite event.`\n      );\n    }\n\n    if (nativeCallInviteEvent === null) {\n      throw new TwilioError('Received a null native call invite event.');\n    }\n\n    if (typeof nativeCallInviteEvent.callSid !== 'string') {\n      throw new TwilioError(\n        'Received a native call invite event without a call SID.'\n      );\n    }\n\n    if (nativeCallInviteEvent.callSid !== this._callSid) {\n      return;\n    }\n\n    switch (nativeCallInviteEvent.type) {\n      case Constants.CallInviteEventTypeValueAccepted:\n        return this._handleCallInviteAccepted(nativeCallInviteEvent);\n      case Constants.CallInviteEventTypeValueRejected:\n        return this._handleCallInviteRejected();\n      case Constants.CallInviteEventTypeValueCancelled:\n        return this._handleCallInviteCancelled(nativeCallInviteEvent);\n      case Constants.CallInviteEventTypeValueNotificationTapped:\n        return this._handleCallInviteNotificationTapped();\n      case Constants.CallEventMessageReceived:\n        return this._handleMessageReceivedEvent(nativeCallInviteEvent);\n      default:\n        return this._handleUnexpectedCallInviteEventType(nativeCallInviteEvent);\n    }\n  };\n\n  /**\n   * Handler for the {@link (CallInvite:namespace).Event.MessageReceived} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleMessageReceivedEvent = (\n    nativeCallInviteEvent: NativeCallInviteMessageReceivedEvent\n  ) => {\n    const { callMessage: callMessageInfo } = nativeCallInviteEvent;\n\n    const callMessage = new CallMessage(callMessageInfo);\n\n    this.emit(CallInvite.Event.MessageReceived, callMessage);\n  };\n\n  /**\n   * Handle when this call invite is accepted.\n   */\n  private _handleCallInviteAccepted = ({\n    callInvite,\n  }: NativeCallInviteAcceptedEvent) => {\n    this._state = CallInvite.State.Accepted;\n\n    const callInfo = {\n      uuid: callInvite.uuid,\n      customParameters: callInvite.customParameters,\n      sid: callInvite.callSid,\n      from: callInvite.from,\n      to: callInvite.to,\n    };\n\n    const call = new Call(callInfo);\n\n    this.emit(CallInvite.Event.Accepted, call);\n  };\n\n  /**\n   * Handle when this call invite is rejected.\n   */\n  private _handleCallInviteRejected = () => {\n    this._state = CallInvite.State.Rejected;\n    this.emit(CallInvite.Event.Rejected);\n  };\n\n  /**\n   * Handle when a call invite is cancelled.\n   */\n  private _handleCallInviteCancelled = (\n    nativeCallInviteCancelledEvent: NativeCallInviteCancelledEvent\n  ) => {\n    this._state = CallInvite.State.Cancelled;\n\n    const error = nativeCallInviteCancelledEvent.error\n      ? constructTwilioError(\n          nativeCallInviteCancelledEvent.error.message,\n          nativeCallInviteCancelledEvent.error.code\n        )\n      : undefined;\n\n    this.emit(CallInvite.Event.Cancelled, error);\n  };\n\n  /**\n   * Handle when a call invite notification is tapped.\n   */\n  private _handleCallInviteNotificationTapped = () => {\n    this.emit(CallInvite.Event.NotificationTapped);\n  };\n\n  /**\n   * Accept a call invite. Sets the state of this call invite to\n   * {@link (CallInvite:namespace).State.Accepted}.\n   * @param options - Options to pass to the native layer when accepting the\n   * call.\n   * @returns\n   *  - Resolves when a {@link (Call:class) | Call object} associated with this\n   *    {@link (CallInvite:class)} has been created.\n   */\n  async accept(options: CallInvite.AcceptOptions = {}): Promise<Call> {\n    if (this._state !== CallInvite.State.Pending) {\n      throw new InvalidStateError(\n        `Call in state \"${this._state}\", ` +\n          `expected state \"${CallInvite.State.Pending}\".`\n      );\n    }\n\n    const callInfo = await NativeModule.callInvite_accept(this._uuid, options);\n\n    const call = new Call(callInfo);\n\n    return call;\n  }\n\n  /**\n   * Reject a call invite. Sets the state of this call invite to\n   * {@link (CallInvite:namespace).State.Rejected}.\n   * @returns\n   *  - Resolves when the {@link (CallInvite:class)} has been rejected.\n   */\n  async reject(): Promise<void> {\n    if (this._state !== CallInvite.State.Pending) {\n      throw new InvalidStateError(\n        `Call in state \"${this._state}\", ` +\n          `expected state \"${CallInvite.State.Pending}\".`\n      );\n    }\n\n    await NativeModule.callInvite_reject(this._uuid);\n  }\n\n  /**\n   * Check if a `CallInvite` is valid.\n   *\n   * @returns\n   *  - TODO\n   *\n   * @alpha\n   */\n  isValid(): Promise<boolean> {\n    return NativeModule.callInvite_isValid(this._uuid);\n  }\n\n  /**\n   * Get the call SID associated with this `CallInvite` class.\n   * @returns - A string representing the call SID.\n   */\n  getCallSid(): string {\n    return this._callSid;\n  }\n\n  /**\n   * Get the custom parameters of the call associated with this `CallInvite`\n   * class.\n   * @returns - A `Record` of custom parameters.\n   */\n  getCustomParameters(): CustomParameters {\n    return this._customParameters;\n  }\n\n  /**\n   * Get the `from` parameter of the call associated with this `CallInvite`\n   * class.\n   * @returns - A `string` representing the `from` parameter.\n   */\n  getFrom(): string {\n    return this._from;\n  }\n\n  /**\n   * Get the `state` of the `CallInvite`.\n   * @returns - The `state` of this `CallInvite`.\n   */\n  getState(): CallInvite.State {\n    return this._state;\n  }\n\n  /**\n   * Get the `to` parameter of the call associated with this `CallInvite`\n   * class.\n   * @returns - A `string` representing the `to` parameter.\n   */\n  getTo(): string {\n    return this._to;\n  }\n\n  /**\n   * CallMessage API is in beta.\n   *\n   * Send {@link (CallMessage:class)}.\n   *\n   * @example\n   * To send a user-defined-message\n   * ```typescript\n   * const message = new CallMessage({\n   *    content: { key1: 'This is a messsage from the parent call' },\n   *    contentType: CallMessage.ContentType.ApplicationJson,\n   *    messageType: CallMessage.MessageType.UserDefinedMessage\n   * })\n   * const outgoingCallMessage: OutgoingCallMessage = await call.sendMessage(message)\n   *\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Failure, (error) => {\n   *    // outgoingCallMessage failed, handle error\n   * });\n   *\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Sent, () => {\n   *    // outgoingCallMessage sent\n   * })\n   * ```\n   *\n   * @param content - The message content\n   * @param contentType - The MIME type for the message. See {@link (CallMessage:namespace).ContentType}.\n   * @param messageType - The message type. See {@link (CallMessage:namespace).MessageType}.\n   *\n   * @returns\n   *  A `Promise` that\n   *    - Resolves with the OutgoingCallMessage object.\n   *    - Rejects when the message is unable to be sent.\n   */\n  async sendMessage(message: CallMessage): Promise<OutgoingCallMessage> {\n    const content = message.getContent();\n    const contentType = message.getContentType();\n    const messageType = message.getMessageType();\n\n    const voiceEventSid = await NativeModule.call_sendMessage(\n      this._uuid,\n      JSON.stringify(content),\n      contentType,\n      messageType\n    );\n\n    const outgoingCallMessage = new OutgoingCallMessage({\n      content,\n      contentType,\n      messageType,\n      voiceEventSid,\n    });\n\n    return outgoingCallMessage;\n  }\n\n  /**\n   * Update the caller name displayed in the iOS system incoming call screen.\n   *\n   * @param newHandle - The new value of the caller's name.\n   *\n   * @remarks\n   * Unsupported platforms:\n   * - Android\n   *\n   * This API is specific to iOS and unavailable in Android. Invoke this method\n   * after the incoming call has been reported to CallKit and before the call\n   * has been accepted. For example, perform an async request to your app server\n   * to fetch the full name of the caller and use this method to replace the\n   * default caller name in `from`.\n   *\n   * @returns\n   *  - Resolves when the caller name has been updated.\n   */\n  async updateCallerHandle(newHandle: string): Promise<void> {\n    switch (Platform.OS) {\n      case 'ios':\n        return NativeModule.callInvite_updateCallerHandle(\n          this._uuid,\n          newHandle\n        );\n      default:\n        throw new UnsupportedPlatformError(\n          `Unsupported platform \"${Platform.OS}\". This method is only supported on iOS.`\n        );\n    }\n  }\n}\n\n/**\n * Provides enumerations and types used by a {@link (CallInvite:class)\n * | CallInvite object}.\n *\n * @remarks\n *  - See also the {@link (CallInvite:class) | CallInvite class}.\n *\n * @public\n */\nexport namespace CallInvite {\n  /**\n   * Options to pass to the native layer when accepting the call.\n   */\n  export interface AcceptOptions {}\n\n  /**\n   * An enumeration of {@link (CallInvite:class)} states.\n   */\n  export enum State {\n    /**\n     * State of a call invite when it has not been acted upon.\n     */\n    Pending = 'pending',\n\n    /**\n     * State of a call invite when it has been accepted.\n     */\n    Accepted = 'accepted',\n\n    /**\n     * State of a call invite when it has been rejected.\n     */\n    Rejected = 'rejected',\n\n    /**\n     * State of a call invite when it has been cancelled.\n     */\n    Cancelled = 'cancelled',\n  }\n\n  /**\n   * Enumeration of all event strings emitted by {@link (CallInvite:class)}\n   * objects.\n   */\n  export enum Event {\n    /**\n     * Event string for the `Accepted` event.\n     * See {@link (CallInvite:interface).(addListener:1)}.\n     */\n    Accepted = 'accepted',\n\n    /**\n     * Event string for the `Rejected` event.\n     * See {@link (CallInvite:interface).(addListener:2)}.\n     */\n    Rejected = 'rejected',\n\n    /**\n     * Event string for the `Cancelled` event.\n     * See {@link (CallInvite:interaface).(addListener:3)}.\n     */\n    Cancelled = 'cancelled',\n\n    /**\n     * Event string for the `NotificationTapped` event.\n     * See {@link (CallInvite:interaface).(addListener:4)}.\n     */\n    NotificationTapped = 'notificationTapped',\n\n    /**\n     * CallMessage API is in beta.\n     *\n     * Event string for the `MessageReceived` event.\n     * See {@link (CallInvite:interface).(addListener:5)}\n     */\n    MessageReceived = 'messageReceived',\n  }\n\n  /**\n   * Listener types for all events emitted by a\n   * {@link (CallInvite:class) | Call invite object.}\n   */\n  export namespace Listener {\n    /**\n     * Accepted event listener. This should be the function signature of any\n     * event listener bound to the {@link (CallInvite:namespace).Event.Accepted}\n     * event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:1)}.\n     */\n    export type Accepted = (call: Call) => void;\n\n    /**\n     * Rejected event listener. This should be the function signature of any\n     * event listener bound to the {@link (CallInvite:namespace).Event.Rejected}\n     * event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:2)}.\n     */\n    export type Rejected = () => void;\n\n    /**\n     * Cancelled event listener. This should be the function signature of any\n     * event listener bound to the\n     * {@link (CallInvite:namespace).Event.Cancelled} event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:3)}.\n     */\n    export type Cancelled = (error?: TwilioError) => void;\n\n    /**\n     * Rejected event listener. This should be the function signature of any\n     * event listener bound to the\n     * {@link (CallInvite:namespace).Event.NotificationTapped} event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:4)}.\n     */\n    export type NotificationTapped = () => void;\n\n    /**\n     * CallMessage API is in beta.\n     *\n     * CallInviteMessage received event listener. This should be the function signature of\n     * any event listener bound to the {@link (CallInvite:namespace).Event.MessageReceived} event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:5)}.\n     */\n    export type MessageReceived = (callMessage: CallMessage) => void;\n  }\n}\n"],"mappings":"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"}