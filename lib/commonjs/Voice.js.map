{"version":3,"names":["_eventemitter","require","_AudioDevice","_Call","_CallInvite","_CancelledCallInvite","_common","_constants","_InvalidArgumentError","_UnsupportedPlatformError","_utility","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","TypeError","Number","Voice","EventEmitter","constructor","nativeVoiceEvent","type","handler","_nativeEventHandler","Error","Constants","VoiceEventCallInvite","callInvite","callInviteInfo","CallInvite","State","Pending","emit","Event","VoiceEventCallInviteAccepted","Accepted","callInfo","uuid","customParameters","sid","callSid","from","to","Call","CallInviteAccepted","VoiceEventCallInviteRejected","Rejected","CallInviteRejected","VoiceEventCallInviteNotificationTapped","CallInviteNotificationTapped","VoiceEventMissedCallNotificationTapped","MissedCallNotificationTapped","VoiceEventCallInviteCancelled","cancelledCallInvite","cancelledCallInviteInfo","error","code","message","CancelledCallInvite","constructTwilioError","VoiceEventError","VoiceEventRegistered","Registered","VoiceEventUnregistered","Unregistered","VoiceEventAudioDevicesUpdated","audioDevices","audioDeviceInfos","selectedDevice","selectedDeviceInfo","map","audioDeviceInfo","AudioDevice","undefined","AudioDevicesUpdated","_handleError","_handleCallInvite","_handleCallInviteAccepted","_handleCallInviteNotificationTapped","_handleMissedCallNotificationTapped","_handleCallInviteRejected","_handleCancelledCallInvite","_handleRegistered","_handleUnregistered","_handleAudioDevicesUpdated","NativeEventEmitter","addListener","ScopeVoice","_handleNativeEvent","_connect_android","token","params","NativeModule","voice_connect_android","_connect_ios","contactHandle","parsedContactHandle","voice_connect_ios","connect","InvalidArgumentError","entries","Platform","OS","UnsupportedPlatformError","getVersion","voice_getVersion","canUseFullScreenIntent","voice_canUseFullScreenIntent","getDeviceToken","voice_getDeviceToken","getCalls","callInfos","voice_getCalls","callsMap","Map","getCallInvites","callInviteInfos","voice_getCallInvites","callInvitesMap","register","voice_register","unregister","voice_unregister","getAudioDevices","voice_getAudioDevices","showAvRoutePickerView","voice_showNativeAvRoutePicker","initializePushRegistry","voice_initializePushRegistry","setCallKitConfiguration","configuration","voice_setCallKitConfiguration","exports","_Voice2"],"sources":["Voice.tsx"],"sourcesContent":["/**\n * Copyright Â© 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport { AudioDevice } from './AudioDevice';\nimport { Call } from './Call';\nimport { CallInvite } from './CallInvite';\nimport { CancelledCallInvite } from './CancelledCallInvite';\nimport { NativeEventEmitter, NativeModule, Platform } from './common';\nimport { Constants } from './constants';\nimport { InvalidArgumentError } from './error/InvalidArgumentError';\nimport type { TwilioError } from './error/TwilioError';\nimport { UnsupportedPlatformError } from './error/UnsupportedPlatformError';\nimport { constructTwilioError } from './error/utility';\nimport type { NativeAudioDeviceInfo } from './type/AudioDevice';\nimport type { NativeCallInfo } from './type/Call';\nimport type { NativeCallInviteInfo } from './type/CallInvite';\nimport type { CallKit } from './type/CallKit';\nimport type { CustomParameters, Uuid } from './type/common';\nimport type { NativeVoiceEvent, NativeVoiceEventType } from './type/Voice';\n\n/**\n * Defines strict typings for all events emitted by {@link (Voice:class)\n * | Voice objects}.\n *\n * @remarks\n * Note that the `on` function is an alias for the `addListener` function.\n * They share identical functionality and either may be used interchangeably.\n *\n * - See also the {@link (Voice:class) | Voice class}.\n * - See also the {@link (Voice:namespace) | Voice namespace}.\n *\n * @public\n */\nexport declare interface Voice {\n  /**\n   * ------------\n   * Emit Typings\n   * ------------\n   */\n\n  /** @internal */\n  emit(\n    voiceEvent: Voice.Event.AudioDevicesUpdated,\n    audioDevices: AudioDevice[],\n    selectedDevice?: AudioDevice\n  ): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.CallInvite, callInvite: CallInvite): boolean;\n\n  /** @internal */\n  emit(\n    voiceEvent: Voice.Event.CallInviteAccepted,\n    callInvite: CallInvite,\n    call: Call\n  ): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.CallInviteNotificationTapped): boolean;\n\n  /** @internal */\n  emit(\n    voiceEvent: Voice.Event.CallInviteRejected,\n    callInvite: CallInvite\n  ): boolean;\n\n  /** @internal */\n  emit(\n    voiceEvent: Voice.Event.CancelledCallInvite,\n    cancelledCallInvite: CancelledCallInvite,\n    error?: TwilioError\n  ): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.Error, error: TwilioError): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.Registered): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.Unregistered): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event, ...args: any[]): boolean;\n\n  /**\n   * ----------------\n   * Listener Typings\n   * ----------------\n   */\n\n  /**\n   * Audio devices updated event. Raised when the list of audio devices changes.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.AudioDevicesUpdated, () => {\n   *   // the list of available audio devices has changed and/or the selected\n   *   // audio device has been changed\n   * });\n   * ```\n   *\n   * @param audioDevicesUpdatedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    audioDevicesUpdatedEvent: Voice.Event.AudioDevicesUpdated,\n    listener: Voice.Listener.AudioDevicesUpdated\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:1)} */\n  on(\n    audioDevicesUpdatedEvent: Voice.Event.AudioDevicesUpdated,\n    listener: Voice.Listener.AudioDevicesUpdated\n  ): this;\n\n  /**\n   * Call invite event. Raised when an incoming call invite is received.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.CallInvite, (callInvite: CallInvite) => {\n   *   // handle the incoming call invite\n   * });\n   * ```\n   *\n   * @param callInviteEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    callInviteEvent: Voice.Event.CallInvite,\n    listener: Voice.Listener.CallInvite\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:2)} */\n  on(\n    callInviteEvent: Voice.Event.CallInvite,\n    listener: Voice.Listener.CallInvite\n  ): this;\n\n  /**\n   * Call invite accepted event. Raised when a pending incoming call invite has\n   * been accepted.\n   *\n   * @remarks\n   * This event is raised when call invites are accepted outside of the SDK,\n   * i.e. through the native iOS or Android UI.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.CallInviteAccepted, (callInvite: CallInvite, call: Call) => {\n   *   // handle the incoming call invite and the call associated with it\n   * });\n   * ```\n   *\n   * @param callInviteAcceptedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    callInviteAcceptedEvent: Voice.Event.CallInviteAccepted,\n    listener: Voice.Listener.CallInviteAccepted\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:3)} */\n  on(\n    callInviteAcceptedEvent: Voice.Event.CallInviteAccepted,\n    listener: Voice.Listener.CallInviteAccepted\n  ): this;\n\n  /**\n   * Call invite notification tapped event. Raised when the body of a push\n   * notification of a pending call invite has been tapped.\n   *\n   * @remarks\n   * Unsupported platforms:\n   * - iOS\n   *\n   * This event is raised by the native layer, i.e. through the native Android\n   * UI.\n   *\n   * This event is never raised when the application is running on the iOS\n   * platform due to CallKit. Attaching a listener while running on an iOS\n   * device is a no-operation, the listener will never be invoked, but no\n   * error will occur.\n   *\n   * @example\n   * ```typescript\n   * voice.addEventListener(Voice.Event.CallInviteNotificationTapped, () => {\n   *   // handle the tapped event\n   *   // for example, your app could navigate to a call invite screen\n   * });\n   * ```\n   */\n  addListener(\n    callInviteNotificationTappedEvent: Voice.Event.CallInviteNotificationTapped,\n    listener: Voice.Listener.CallInviteNotificationTapped\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:4)} */\n  on(\n    callInviteNotificationTappedEvent: Voice.Event.CallInviteNotificationTapped,\n    listener: Voice.Listener.CallInviteNotificationTapped\n  ): this;\n\n\n  addListener(\n    missedCallNotificationTappedEvent: Voice.Event.CallInviteNotificationTapped,\n    listener: Voice.Listener.MissedCallNotificationTapped\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:4)} */\n  on(\n    callInviteNotificationTappedEvent: Voice.Event.CallInviteNotificationTapped,\n    listener: Voice.Listener.CallInviteNotificationTapped\n  ): this;\n\n  /**\n   * Call invite rejected event. Raised when a pending incoming call invite has\n   * been rejected.\n   *\n   * @remarks\n   * This event is raised when call invites are rejected outside of the SDK,\n   * i.e. through the native iOS or Android UI.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.CallInviteRejected, (callInvite: CallInvite) => {\n   *   // handle the rejection of the incoming call invite\n   * });\n   * ```\n   *\n   * @param callInviteRejectedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    callInviteRejectedEvent: Voice.Event.CallInviteRejected,\n    listener: Voice.Listener.CallInviteRejected\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:5)} */\n  on(\n    callInviteRejectedEvent: Voice.Event.CallInviteRejected,\n    listener: Voice.Listener.CallInviteRejected\n  ): this;\n\n  /**\n   * Cancelled call invite event. Raised when a pending incoming call invite has\n   * been cancelled and is no longer valid.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.CancelledCallInvite, (cancelledCallInvite: CancelledCallInvite) => {\n   *   // handle the cancellation of the incoming call invite\n   * });\n   * ```\n   *\n   * @param cancelledCallInviteEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    cancelledCallInviteEvent: Voice.Event.CancelledCallInvite,\n    listener: Voice.Listener.CancelledCallInvite\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:6)} */\n  on(\n    cancelledCallInviteEvent: Voice.Event.CancelledCallInvite,\n    listener: Voice.Listener.CancelledCallInvite\n  ): this;\n\n  /**\n   * Error event. Raised when the SDK encounters an error.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.Error, (error: TwilioError.GenericError) => {\n   *   // handle a generic Voice SDK error\n   * });\n   * ```\n   *\n   * @param errorEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    errorEvent: Voice.Event.Error,\n    listener: Voice.Listener.Error\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:7)} */\n  on(errorEvent: Voice.Event.Error, listener: Voice.Listener.Error): this;\n\n  /**\n   * Registered event. Raised when the SDK is registered for incoming calls.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.Registered, () => {\n   *   // handle successful registration for incoming calls\n   * });\n   * ```\n   *\n   * @param registeredEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    registeredEvent: Voice.Event.Registered,\n    listener: Voice.Listener.Registered\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:8)} */\n  on(\n    registeredEvent: Voice.Event.Registered,\n    listener: Voice.Listener.Registered\n  ): this;\n\n  /**\n   * Unregistered event. Raised when the SDK is unregistered for incoming calls.\n   *\n   * @example\n   * ```typescript\n   * voice.addListener(Voice.Event.Unregistered, () => {\n   *   // handle successful unregistration for incoming calls\n   * });\n   * ```\n   *\n   * @param unregisteredEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    unregisteredEvent: Voice.Event.Unregistered,\n    listener: Voice.Listener.Unregistered\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addListener:9)} */\n  on(\n    unregisteredEvent: Voice.Event.Unregistered,\n    listener: Voice.Listener.Unregistered\n  ): this;\n\n  /**\n   * Generic event listener typings.\n   * @param voiceEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(voiceEvent: Voice.Event, listener: Voice.Listener.Generic): this;\n  /** {@inheritDoc (Voice:interface).(addListener:10)} */\n  on(voiceEvent: Voice.Event, listener: Voice.Listener.Generic): this;\n}\n\n/**\n * Main entry-point of the Voice SDK. Provides access to the entire feature-set\n * of the library.\n *\n * @example\n * Usage:\n * ```\n * const token = '...';\n *\n * const voice = new Voice();\n *\n * voice.on(Voice.Event.CallInvite, (callInvite: CallInvite) => {\n *   callInvite.accept();\n * });\n *\n * voice.register(token);\n * ```\n *\n * @remarks\n *  - See also the {@link (Voice:namespace).Event} enum for events emitted by\n *    `Voice` objects.\n *  - See also the {@link (Voice:interface) | Voice interface} for events\n *    emitted by this class and associated types.\n *  - See also the {@link (Voice:namespace) | Voice namespace} for types and\n *    enumerations used by this class.\n *\n * @public\n */\nexport class Voice extends EventEmitter {\n  /**\n   * Handlers for native voice events. Set upon construction so we can\n   * dynamically bind events to handlers.\n   *\n   * @privateRemarks\n   * This is done by the constructor so this mapping isn't made every time the\n   * {@link (Voice:class)._handleNativeEvent} function is invoked.\n   */\n  private _nativeEventHandler: Record<\n    NativeVoiceEventType,\n    (voiceEvent: NativeVoiceEvent) => void\n  >;\n\n  /**\n   * Main entry-point of the Voice SDK. Provides access to the entire\n   * feature-set of the library.\n   */\n  constructor() {\n    super();\n\n    this._nativeEventHandler = {\n      /**\n       * Common\n       */\n      [Constants.VoiceEventError]: this._handleError,\n\n      /**\n       * Call Invite\n       */\n      [Constants.VoiceEventCallInvite]: this._handleCallInvite,\n      [Constants.VoiceEventCallInviteAccepted]: this._handleCallInviteAccepted,\n      [Constants.VoiceEventCallInviteNotificationTapped]:\n        this._handleCallInviteNotificationTapped,\n        [Constants.VoiceEventMissedCallNotificationTapped]:\n        this._handleMissedCallNotificationTapped,\n      [Constants.VoiceEventCallInviteRejected]: this._handleCallInviteRejected,\n      [Constants.VoiceEventCallInviteCancelled]:\n        this._handleCancelledCallInvite,\n\n      /**\n       * Registration\n       */\n      [Constants.VoiceEventRegistered]: this._handleRegistered,\n      [Constants.VoiceEventUnregistered]: this._handleUnregistered,\n\n      /**\n       * Audio Devices\n       */\n      [Constants.VoiceEventAudioDevicesUpdated]:\n        this._handleAudioDevicesUpdated,\n    };\n\n    NativeEventEmitter.addListener(\n      Constants.ScopeVoice,\n      this._handleNativeEvent\n    );\n  }\n\n  /**\n   * Connect for devices on Android platforms.\n   */\n  private async _connect_android(token: string, params: CustomParameters) {\n    const callInfo = await NativeModule.voice_connect_android(token, params);\n    return new Call(callInfo);\n  }\n\n  /**\n   * Connect for devices on iOS platforms.\n   */\n  private async _connect_ios(\n    token: string,\n    params: CustomParameters,\n    contactHandle: string\n  ) {\n    const parsedContactHandle =\n      contactHandle === '' ? 'Default Contact' : contactHandle;\n    const callInfo = await NativeModule.voice_connect_ios(\n      token,\n      params,\n      parsedContactHandle\n    );\n    return new Call(callInfo);\n  }\n\n  /**\n   * Intermediary event handler for `Voice`-level events. Ensures that the type\n   * of the incoming event is expected and invokes the proper event listener.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleNativeEvent = (nativeVoiceEvent: NativeVoiceEvent) => {\n    const { type } = nativeVoiceEvent;\n\n    const handler = this._nativeEventHandler[type];\n    if (typeof handler === 'undefined') {\n      throw new Error(\n        `Unknown voice event type received from the native layer: \"${type}\".`\n      );\n    }\n\n    handler(nativeVoiceEvent);\n  };\n\n  /**\n   * Call invite handler. Creates a {@link (CallInvite:class)} from the info\n   * raised by the native layer and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleCallInvite = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventCallInvite) {\n      throw new Error(\n        'Incorrect \"voice#callInvite\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const { callInvite: callInviteInfo } = nativeVoiceEvent;\n\n    const callInvite = new CallInvite(callInviteInfo, CallInvite.State.Pending);\n\n    this.emit(Voice.Event.CallInvite, callInvite);\n  };\n\n  /**\n   * Call invite accepted handler. Creates a {@link (CallInvite:class)} and a\n   * {@link (Call:class)} from the info raised by the native layer and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleCallInviteAccepted = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventCallInviteAccepted) {\n      throw new Error(\n        'Incorrect \"voice#callInviteAccepted\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const { callInvite: callInviteInfo } = nativeVoiceEvent;\n\n    const callInvite = new CallInvite(\n      callInviteInfo,\n      CallInvite.State.Accepted\n    );\n\n    const callInfo = {\n      uuid: callInviteInfo.uuid,\n      customParameters: callInviteInfo.customParameters,\n      sid: callInviteInfo.callSid,\n      from: callInviteInfo.from,\n      to: callInviteInfo.to,\n    };\n\n    const call = new Call(callInfo);\n\n    this.emit(Voice.Event.CallInviteAccepted, callInvite, call);\n  };\n\n  /**\n   * Call invite rejected handler. Creates a {@link (CallInvite:class)} from the\n   * info raised by the native layer and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleCallInviteRejected = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventCallInviteRejected) {\n      throw new Error(\n        'Incorrect \"voice#callInviteRejected\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const { callInvite: callInviteInfo } = nativeVoiceEvent;\n\n    const callInvite = new CallInvite(\n      callInviteInfo,\n      CallInvite.State.Rejected\n    );\n\n    this.emit(Voice.Event.CallInviteRejected, callInvite);\n  };\n\n  /**\n   * Call invite notification tapped handler. This event can be used to\n   * navigate to a call invite screen.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleCallInviteNotificationTapped = (\n    nativeVoiceEvent: NativeVoiceEvent\n  ) => {\n    if (\n      nativeVoiceEvent.type !== Constants.VoiceEventCallInviteNotificationTapped\n    ) {\n      throw new Error(\n        'Incorrect \"voice#callInviteNotificationTapped\" handler called for ' +\n          `type \"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    // this.emit(Voice.Event.CallInviteNotificationTapped);\n\n    const { callInvite: callInviteInfo } = nativeVoiceEvent;\n\n    const callInvite = new CallInvite(callInviteInfo, CallInvite.State.Pending);\n\n    this.emit(Voice.Event.CallInviteNotificationTapped, callInvite);\n\n  };\n\n  private _handleMissedCallNotificationTapped = (\n    nativeVoiceEvent: NativeVoiceEvent\n  ) => {\n    if (\n      nativeVoiceEvent.type !== Constants.VoiceEventMissedCallNotificationTapped\n    ) {\n      throw new Error(\n        'Incorrect \"voice#callInviteNotificationTapped\" handler called for ' +\n          `type \"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    // this.emit(Voice.Event.CallInviteNotificationTapped);\n\n    const { callInvite: callInviteInfo } = nativeVoiceEvent;\n\n    this.emit(Voice.Event.MissedCallNotificationTapped, callInviteInfo);\n  };\n\n  /**\n   * Call invite cancelled handler. Creates a\n   * {@link (CancelledCallInvite:class)} from the info raised by the native\n   * layer and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleCancelledCallInvite = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventCallInviteCancelled) {\n      throw new Error(\n        'Incorrect \"voice#cancelledCallInvite\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const {\n      cancelledCallInvite: cancelledCallInviteInfo,\n      error: { code, message },\n    } = nativeVoiceEvent;\n    const cancelledCallInvite = new CancelledCallInvite(\n      cancelledCallInviteInfo\n    );\n    const error = constructTwilioError(message, code);\n\n    this.emit(Voice.Event.CancelledCallInvite, cancelledCallInvite, error);\n  };\n\n  /**\n   * Error event handler. Creates an error from the namespace\n   * {@link TwilioErrors} from the info raised by the native layer and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleError = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventError) {\n      throw new Error(\n        'Incorrect \"voice#error\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const {\n      error: { code, message },\n    } = nativeVoiceEvent;\n    const error = constructTwilioError(message, code);\n    this.emit(Voice.Event.Error, error);\n  };\n\n  /**\n   * Registered event handler. Emits a\n   * {@link (Voice:namespace).Event.Registered} event.\n   */\n  private _handleRegistered = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventRegistered) {\n      throw new Error(\n        'Incorrect \"voice#error\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    this.emit(Voice.Event.Registered);\n  };\n\n  /**\n   * Unregistered event handler. Emits a\n   * {@link (Voice:namespace).Event.Unregistered} event.\n   */\n  private _handleUnregistered = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventUnregistered) {\n      throw new Error(\n        'Incorrect \"voice#error\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    this.emit(Voice.Event.Unregistered);\n  };\n\n  /**\n   * Audio devices updated event handler. Generates a new list of\n   * {@link (AudioDevice:class) | AudioDevice objects} and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleAudioDevicesUpdated = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventAudioDevicesUpdated) {\n      throw new Error(\n        'Incorrect \"voice#audioDevicesUpdated\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const {\n      audioDevices: audioDeviceInfos,\n      selectedDevice: selectedDeviceInfo,\n    } = nativeVoiceEvent;\n\n    const audioDevices = audioDeviceInfos.map(\n      (audioDeviceInfo: NativeAudioDeviceInfo) =>\n        new AudioDevice(audioDeviceInfo)\n    );\n\n    const selectedDevice =\n      typeof selectedDeviceInfo !== 'undefined' && selectedDeviceInfo !== null\n        ? new AudioDevice(selectedDeviceInfo)\n        : undefined;\n\n    this.emit(Voice.Event.AudioDevicesUpdated, audioDevices, selectedDevice);\n  };\n\n  /**\n   * Create an outgoing call.\n   *\n   * @remarks\n   * Note that the resolution of the returned `Promise` does not imply any call\n   * event occurring, such as answered or rejected.\n   * The `contactHandle` parameter is only required for iOS apps. Currently the\n   * parameter does have any effect on Android apps and can be ignored.\n   * `Default Contact` will appear in the iOS call history if the value is empty\n   * or not provided.\n   *\n   * @param token - A Twilio Access Token, usually minted by an\n   * authentication-gated endpoint using a Twilio helper library.\n   * @param options - Connect options.\n   *  See {@link (Voice:namespace).ConnectOptions}.\n   *\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a call when the call is created.\n   *  - Rejects:\n   *    * When a call is not able to be created on the native layer.\n   *    * With an {@link TwilioErrors.InvalidArgumentError} when invalid\n   *      arguments are passed.\n   */\n  async connect(\n    token: string,\n    {\n      contactHandle = 'Default Contact',\n      params = {},\n    }: Voice.ConnectOptions = {}\n  ): Promise<Call> {\n    if (typeof token !== 'string') {\n      throw new InvalidArgumentError(\n        'Argument \"token\" must be of type \"string\".'\n      );\n    }\n\n    if (typeof contactHandle !== 'string') {\n      throw new InvalidArgumentError(\n        'Optional argument \"contactHandle\" must be undefined or of type' +\n          ' \"string\".'\n      );\n    }\n\n    if (typeof params !== 'object') {\n      throw new InvalidArgumentError(\n        'Optional argument \"params\" must be undefined or of type \"object\".'\n      );\n    }\n\n    for (const [key, value] of Object.entries(params)) {\n      if (typeof value !== 'string') {\n        throw new InvalidArgumentError(\n          `Voice.ConnectOptions.params[\"${key}\"] must be of type string`\n        );\n      }\n    }\n\n    switch (Platform.OS) {\n      case 'ios':\n        return this._connect_ios(token, params, contactHandle);\n      case 'android':\n        return this._connect_android(token, params);\n      default:\n        throw new UnsupportedPlatformError(\n          `Unsupported platform \"${Platform.OS}\". Expected \"android\" or \"ios\".`\n        );\n    }\n  }\n\n  /**\n   * Get the version of the native SDK. Note that this is not the version of the\n   * React Native SDK, this is the version of the mobile SDK that the RN SDK is\n   * utilizing.\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a string representing the version of the native SDK.\n   */\n  getVersion(): Promise<string> {\n    return NativeModule.voice_getVersion();\n  }\n\n  canUseFullScreenIntent(): Promise<boolean> {\n    return NativeModule.voice_canUseFullScreenIntent();\n  }\n\n  /**\n   * Get the Device token from the native layer.\n   * @returns a Promise that resolves with a string representing the Device\n   * token.\n   */\n  getDeviceToken(): Promise<string> {\n    return NativeModule.voice_getDeviceToken();\n  }\n\n  /**\n   * Get a list of existing calls, ongoing and pending. This will not return any\n   * call that has finished.\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a mapping of `Uuid`s to {@link (Call:class)}s.\n   */\n  async getCalls(): Promise<ReadonlyMap<Uuid, Call>> {\n    const callInfos = await NativeModule.voice_getCalls();\n    const callsMap = new Map<Uuid, Call>(\n      callInfos.map((callInfo: NativeCallInfo) => [\n        callInfo.uuid,\n        new Call(callInfo),\n      ])\n    );\n    return callsMap;\n  }\n\n  /**\n   * Get a list of pending call invites.\n   *\n   * @remarks\n   * This list will not contain any call invites that have been \"settled\"\n   * (answered or rejected).\n   *\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a mapping of `Uuid`s to {@link (CallInvite:class)}s.\n   */\n  async getCallInvites(): Promise<ReadonlyMap<Uuid, CallInvite>> {\n    const callInviteInfos = await NativeModule.voice_getCallInvites();\n    const callInvitesMap = new Map<Uuid, CallInvite>(\n      callInviteInfos.map((callInviteInfo: NativeCallInviteInfo) => [\n        callInviteInfo.uuid,\n        new CallInvite(callInviteInfo, CallInvite.State.Pending),\n      ])\n    );\n    return callInvitesMap;\n  }\n\n  /**\n   * Register this device for incoming calls.\n   * @param token - A Twilio Access Token.\n   * @returns\n   * A `Promise` that\n   *  - Resolves when the device has been registered.\n   */\n  register(token: string): Promise<void> {\n    return NativeModule.voice_register(token);\n  }\n\n  /**\n   * Unregister this device for incoming calls.\n   * @param token - A Twilio Access Token.\n   * @returns\n   * A `Promise` that\n   *  - Resolves when the device has been unregistered.\n   */\n  unregister(token: string): Promise<void> {\n    return NativeModule.voice_unregister(token);\n  }\n\n  /**\n   * Get audio device information from the native layer.\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a list of the native device's audio devices and the\n   *    currently selected device.\n   */\n  async getAudioDevices(): Promise<{\n    audioDevices: AudioDevice[];\n    selectedDevice?: AudioDevice;\n  }> {\n    const {\n      audioDevices: audioDeviceInfos,\n      selectedDevice: selectedDeviceInfo,\n    } = await NativeModule.voice_getAudioDevices();\n\n    const audioDevices = audioDeviceInfos.map(\n      (audioDeviceInfo: NativeAudioDeviceInfo) =>\n        new AudioDevice(audioDeviceInfo)\n    );\n\n    const selectedDevice =\n      typeof selectedDeviceInfo !== 'undefined'\n        ? new AudioDevice(selectedDeviceInfo)\n        : undefined;\n\n    return selectedDevice ? { audioDevices, selectedDevice } : { audioDevices };\n  }\n\n  /**\n   * Show the native AV route picker.\n   *\n   * @remarks\n   * Unsupported platforms:\n   * - Android\n   *\n   * This API is specific to iOS and unavailable in Android. If this API is\n   * invoked on Android, there will be no operation and the returned `Promise`\n   * will immediately resolve with `null`.\n   *\n   * @returns\n   * A `Promise` that\n   *  - Resolves when the AV Route Picker View is shown.\n   */\n  showAvRoutePickerView(): Promise<void> {\n    return NativeModule.voice_showNativeAvRoutePicker();\n  }\n\n  /**\n   * Initialize a Push Registry instance inside the SDK for handling\n   * PushKit device token updates and receiving push notifications.\n   *\n   * @remarks\n   * Unsupported platforms:\n   * - Android\n   *\n   * This API is specific to iOS and unavailable in Android.\n   * Use this method if the application does not have an iOS PushKit\n   * module and wishes to delegate the event handling to the SDK.\n   * Call this method upon launching the app to guarantee that incoming\n   * call push notifications will be surfaced to the users, especially when\n   * the app is not running in the foreground.\n   *\n   * @return\n   * A `Promise` that\n   *  - Resolves when the initialization is done.\n   */\n  async initializePushRegistry(): Promise<void> {\n    switch (Platform.OS) {\n      case 'ios':\n        return NativeModule.voice_initializePushRegistry();\n      default:\n        throw new UnsupportedPlatformError(\n          `Unsupported platform \"${Platform.OS}\". This method is only supported on iOS.`\n        );\n    }\n  }\n\n  /**\n   * Custom iOS CallKit configuration.\n   *\n   * @param configuration - iOS CallKit configuration options.\n   *\n   * @remarks\n   * Unsupported platforms:\n   * - Android\n   *\n   * See {@link CallKit} for more information.\n   *\n   * @returns\n   * A `Promise` that\n   *  - Resolves when the configuration has been applied.\n   *  - Rejects if the configuration is unable to be applied.\n   */\n  async setCallKitConfiguration(\n    configuration: CallKit.ConfigurationOptions\n  ): Promise<void> {\n    switch (Platform.OS) {\n      case 'ios':\n        return NativeModule.voice_setCallKitConfiguration(configuration);\n      default:\n        throw new UnsupportedPlatformError(\n          `Unsupported platform \"${Platform.OS}\". This method is only supported on iOS.`\n        );\n    }\n  }\n}\n\n/**\n * Provides enumerations and types used by {@link (Voice:class)\n * | Voice objects}.\n *\n * @remarks\n * - See also the {@link (Voice:class) | Voice class}.\n * - See also the {@link (Voice:interface) | Voice interface}.\n *\n * @public\n */\nexport namespace Voice {\n  /**\n   * Options to pass to the {@link (Voice:class).connect} method.\n   */\n  export type ConnectOptions = {\n    /**\n     * Custom parameters to send to the TwiML Application.\n     */\n    params?: Record<string, string>;\n    /**\n     * A CallKit display name that will show in the call history as the contact\n     * handle.\n     *\n     * @remarks\n     * Unsupported platforms:\n     * - Android\n     */\n    contactHandle?: string;\n  };\n\n  /**\n   * Enumeration of all event strings emitted by {@link (Voice:class)} objects.\n   */\n  export enum Event {\n    /**\n     * Raised when there is a change in available audio devices.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:1)\n     * | Voice.addListener(AudioDevicesUpdated)}.\n     */\n    'AudioDevicesUpdated' = 'audioDevicesUpdated',\n\n    /**\n     * Raised when there is an incoming call invite.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:2)\n     * | Voice.addListener(CallInvite)}.\n     */\n    'CallInvite' = 'callInvite',\n\n    /**\n     * Raised when an incoming call invite has been accepted.\n     *\n     * This event can be raised either through the SDK or outside of the SDK\n     * (i.e. through native UI/UX such as push notifications).\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:3)\n     * | Voice.addListener(CallInviteAccepted)}.\n     */\n    'CallInviteAccepted' = 'callInviteAccepted',\n\n    /**\n     * Raised when the notification for an incoming call invite has been tapped.\n     *\n     * This event is raised only from the native layer, through the push\n     * notification.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:4)}\n     */\n    'CallInviteNotificationTapped' = 'callInviteNotificationTapped',\n\n    'MissedCallNotificationTapped' = 'missedCallNotificationTapped',\n\n    /**\n     * Raised when an incoming call invite has been rejected.\n     *\n     * This event can be raised either through the SDK or outside of the SDK\n     * (i.e. through native UI/UX such as push notifications).\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:5)\n     * | Voice.addListener(CallInviteRejected)}.\n     */\n    'CallInviteRejected' = 'callInviteRejected',\n\n    /**\n     * Raised when an incoming call invite has been cancelled, thus invalidating\n     * the associated call invite.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:6)\n     * | Voice.addListener(CancelledCallInvite)}.\n     */\n    'CancelledCallInvite' = 'cancelledCallInvite',\n\n    /**\n     * Raised when the SDK encounters an error.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:7)\n     * | Voice.addListener(Error)}.\n     */\n    'Error' = 'error',\n\n    /**\n     * Raised when the SDK is registered for incoming calls.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:8)\n     * | Voice.addListener(Registered)}.\n     */\n    'Registered' = 'registered',\n\n    /**\n     * Raised when the SDK is unregistered for incoming calls.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:9)\n     * | Voice.addListener(Unregistered)}.\n     */\n    'Unregistered' = 'unregistered',\n  }\n\n  /**\n   * Listener types for all events emitted by a {@link (Voice:class)\n   * | Voice object.}\n   */\n  export namespace Listener {\n    /**\n     * Audio devices updated event listener. This should be the function\n     * signature of an event listener bound to the\n     * {@link (Voice:namespace).Event.AudioDevicesUpdated} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:1)}.\n     */\n    export type AudioDevicesUpdated = (\n      audioDevices: AudioDevice[],\n      selectedDevice?: AudioDevice\n    ) => void;\n\n    /**\n     * Call invite event listener. This should be the function signature of an\n     * event listener bound to the\n     * {@link (Voice:namespace).Event.CallInvite} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:2)}.\n     */\n    export type CallInvite = (callInvite: CallInvite) => void;\n\n    /**\n     * Call invite accepted event listener. This should be the function\n     * signature of an event listener bound to the\n     * {@link (Voice:namespace).Event.CallInviteAccepted} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:3)}.\n     */\n    export type CallInviteAccepted = (\n      callInvite: CallInvite,\n      call: Call\n    ) => void;\n\n    /**\n     * Call invite notification tapped event listener. This should be the\n     * function signature of an event listener bound to the\n     * {@link (Voice:namespace).Event.CallInviteNotificationTapped} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:4)}.\n     */\n    export type CallInviteNotificationTapped = () => void;\n\n    export type MissedCallNotificationTapped = () => void;\n\n    /**\n     * Call invite rejected event listener. This should be the function\n     * signature of an event listener bound to the\n     * {@link (Voice:namespace).Event.CallInviteRejected} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:5)}.\n     */\n    export type CallInviteRejected = (callInvite: CallInvite) => void;\n\n    /**\n     * Call invite cancelled event listener. This should be the function\n     * signature of an event listener bound to the\n     * {@link (Voice:namespace).Event.CancelledCallInvite} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:6)}.\n     *\n     * See {@link TwilioErrors} for all error classes.\n     */\n    export type CancelledCallInvite = (\n      cancelledCallInvite: CancelledCallInvite,\n      error?: TwilioError\n    ) => void;\n\n    /**\n     * Error event listener. This should be the function signature of an event\n     * listener bound to the\n     * {@link (Voice:namespace).Event.Error} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:7)}.\n     *\n     * See {@link TwilioErrors} for all error classes.\n     */\n    export type Error = (error: TwilioError) => void;\n\n    /**\n     * Registered event listener. This should be the function signature of an\n     * event listener bound to the\n     * {@link (Voice:namespace).Event.Registered} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:8)}.\n     */\n    export type Registered = () => void;\n\n    /**\n     * Unregistered event listener. This should be the function signature of an\n     * event listener bound to the\n     * {@link (Voice:namespace).Event.Unregistered} event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:9)}.\n     */\n    export type Unregistered = () => void;\n\n    /**\n     * Generic event listener. This should be the function signature of any\n     * event listener bound to any voice event.\n     *\n     * @remarks\n     *\n     * See {@link (Voice:interface).(addListener:10)}.\n     */\n    export type Generic = (...args: any[]) => void;\n  }\n}\n"],"mappings":"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"}