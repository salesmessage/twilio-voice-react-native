{"version":3,"names":["_constants","require","_common","_utility","_CallMessage","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","TypeError","Number","OutgoingCallMessage","CallMessage","constructor","content","contentType","messageType","voiceEventSid","nativeCallMessageEvent","type","handler","_nativeEventHandler","Error","getSid","Constants","CallEventMessageFailure","message","code","error","constructTwilioError","emit","Event","Failure","CallEventMessageSent","Sent","_handleFailureEvent","_handleSentEvent","NativeEventEmitter","addListener","ScopeCallMessage","_handleNativeEvent","exports","_OutgoingCallMessage2"],"sources":["OutgoingCallMessage.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport type { TwilioError } from './error';\nimport type {\n  NativeCallMessageEvent,\n  NativeCallMessageEventType,\n  NativeCallMessageInfo,\n} from './type/CallMessage';\nimport { Constants } from './constants';\nimport { NativeEventEmitter } from './common';\nimport { constructTwilioError } from './error/utility';\nimport { CallMessage } from './CallMessage';\n\n/**\n * Defines strict typings for all events emitted by {@link (OutgoingCallMessage:class)\n * | OutgoingCallMessage objects}.\n *\n * @remarks\n * Note that the `on` function is an alias for the `addListener` function.\n * They share identical functionality and either may be used interchangeably.\n *\n * - See also the {@link (CallMessage:class) | CallMessage class}.\n * - See also the {@link (OutgoingCallMessage:namespace) | OutgoingCallMessage namespace}.\n *\n * @public\n */\nexport declare interface OutgoingCallMessage {\n  /**\n   * ------------\n   * Emit Typings\n   * ------------\n   */\n\n  /** @internal */\n  emit(\n    failureEvent: OutgoingCallMessage.Event.Failure,\n    error: TwilioError\n  ): boolean;\n\n  /** @internal */\n  emit(sentEvent: OutgoingCallMessage.Event.Sent): boolean;\n\n  /** @internal */\n  emit(\n    outgoingCallMessageEvent: OutgoingCallMessage.Event,\n    ...args: any[]\n  ): boolean;\n\n  /**\n   * ----------------\n   * Listener Typings\n   * ----------------\n   */\n\n  /**\n   * Failure event. Raised when outgoingCallMessage fails to be sent out.\n   *\n   * @example\n   * ```typescript\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Failure, (error) => {\n   *    // outgoingCallMessage failed, handle error\n   * });\n   * ```\n   *\n   * @param failureEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The callMessage object.\n   */\n  addListener(\n    failureEvent: OutgoingCallMessage.Event.Failure,\n    listener: OutgoingCallMessage.Listener.Failure\n  ): this;\n  /** {@inheritDoc (OutgoingCallMessage:interface).(addListener:1)} */\n  on(\n    failureEvent: OutgoingCallMessage.Event.Failure,\n    listener: OutgoingCallMessage.Listener.Failure\n  ): this;\n\n  /**\n   * Sent event. Raised when outgoingCallMessage is sent.\n   * @example\n   * ```typescript\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Sent, () => {\n   *    // outgoingCallMessage sent\n   * })\n   * ```\n   *\n   * @param sentEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The callMessage object\n   */\n  addListener(\n    sentEvent: OutgoingCallMessage.Event.Sent,\n    listener: OutgoingCallMessage.Listener.Sent\n  ): this;\n  /** {@inheritDoc (OutgoingCallMessage:interface).(addListener:2)} */\n  on(\n    sentEvent: OutgoingCallMessage.Event.Sent,\n    listener: OutgoingCallMessage.Listener.Sent\n  ): this;\n\n  /**\n   * Generic event listener typings.\n   * @param outgoingCallMessageEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The outgoingCallMessage object.\n   */\n  addListener(\n    outgoingCallMessageEvent: OutgoingCallMessage.Event,\n    listener: OutgoingCallMessage.Listener.Generic\n  ): this;\n  /**\n   * {@inheritDoc (OutgoingCallMessage:interface).(addListener:3)}\n   */\n  on(\n    outgoingCallMessageEvent: OutgoingCallMessage.Event,\n    listener: OutgoingCallMessage.Listener.Generic\n  ): this;\n}\n\n/**\n * CallMessage API is in beta.\n *\n * Provides access to information about a outgoingCallMessage, including the call\n * message content, contentType, messageType, and voiceEventSid\n *\n * @remarks\n * Note that the outgoingCallMessage information is fetched as soon as possible from the\n * native layer, but there is no guarantee that all information is immediately\n * available. Methods such as `OutgoingCallMessage.getContent` or `OutgoingCallMessage.getSid`\n * may return `undefined`.\n *\n * As outgoingCallMessage events are received from the native layer, outgoingCallMessage information will\n * propagate from the native layer to the JS layer and become available.\n * Therefore, it is good practice to read information from the outgoingCallMessage after an\n * event occurs, or as events occur.\n *\n * - See the {@link (OutgoingCallMessage:namespace).Event} enum for events emitted by `OutgoingCallMessage`\n *   objects.\n * - See the {@link (OutgoingCallMessage:interface) | OutgoingCallMessage interface} for overloaded event listening\n *   metods.\n * - See the {@link (OutgoingCallMessage:namespace) | OutgoingCallMessage namespace} for types and enumerations\n *   used by this class.\n *\n * @public\n */\nexport class OutgoingCallMessage extends CallMessage {\n  /**\n   * Handlers for native OutgoingCallMessage events. Set upon construction so we can\n   * dynamically bind events to handlers.\n   *\n   * @privateRemarks\n   * This is done by the constructor so this mapping isn't made every time the\n   * {@link (OutgoingCallMessage:class)._handleNativeEvent} function is invoked.\n   */\n  private _nativeEventHandler: Record<\n    NativeCallMessageEventType,\n    (callEvent: NativeCallMessageEvent) => void\n  >;\n  constructor({\n    content,\n    contentType,\n    messageType,\n    voiceEventSid,\n  }: NativeCallMessageInfo) {\n    super({\n      content,\n      contentType,\n      messageType,\n      voiceEventSid,\n    });\n\n    this._nativeEventHandler = {\n      /**\n       * Sending Call Message State\n       */\n      [Constants.CallEventMessageFailure]: this._handleFailureEvent,\n      [Constants.CallEventMessageSent]: this._handleSentEvent,\n    };\n    NativeEventEmitter.addListener(\n      Constants.ScopeCallMessage,\n      this._handleNativeEvent\n    );\n  }\n\n  /**\n   * This intermediate native callMessage event handler acts as a \"gate\".\n   * @param nativeCallMessageEvent - A callMessage event directly from the native layer.\n   */\n  private _handleNativeEvent = (\n    nativeCallMessageEvent: NativeCallMessageEvent\n  ) => {\n    const { type } = nativeCallMessageEvent;\n\n    const handler = this._nativeEventHandler[type];\n    if (typeof handler === 'undefined') {\n      throw new Error(\n        `Unknown callMessage event type received from the native layer: \"${type}\"`\n      );\n    }\n\n    if (this.getSid() === nativeCallMessageEvent.voiceEventSid) {\n      handler(nativeCallMessageEvent);\n    }\n  };\n\n  /**\n   * Handler for the {@link (OutgoingCallMessage:namespace).Event.Failure} event.\n   * @param nativeCallMessageEvent - The native callMessage event.\n   */\n  private _handleFailureEvent = (\n    nativeCallMessageEvent: NativeCallMessageEvent\n  ) => {\n    if (nativeCallMessageEvent.type !== Constants.CallEventMessageFailure) {\n      throw new Error(\n        'Incorrect \"outgoingCallMessage#Failure\" handler called for type' +\n          `\"${nativeCallMessageEvent.type}`\n      );\n    }\n\n    const { message, code } = nativeCallMessageEvent.error;\n    const error = constructTwilioError(message, code);\n    this.emit(OutgoingCallMessage.Event.Failure, error);\n  };\n\n  /**\n   * Handler for the {@link (OutgoingCallMessage:namespace).Event.Sent} event.\n   * @param nativeCallMessageEvent - The native callMessage event.\n   */\n  private _handleSentEvent = (\n    nativeCallMessageEvent: NativeCallMessageEvent\n  ) => {\n    if (nativeCallMessageEvent.type !== Constants.CallEventMessageSent) {\n      throw new Error(\n        'Incorrect \"outgoingCallMessage#Sent\" handler called for type' +\n          `\"${nativeCallMessageEvent.type}\"`\n      );\n    }\n\n    this.emit(OutgoingCallMessage.Event.Sent);\n  };\n}\n\n/**\n * Namespace for enumerations and types used by\n * {@link (OutgoingCallMessage:class) | OutgoingCallMessage objects}.\n *\n * @remarks\n *  - See also the {@link (OutgoingCallMessage:class) | OutgoingCallMessage class}.\n *  - See also the {@link (OutgoingCallMessage:interface) | OutgoingCallMessage interface}.\n *\n * @public\n */\nexport namespace OutgoingCallMessage {\n  /**\n   * Enumeration of all event strings emitted by {@link (OutgoingCallMessage:class)} objects.\n   */\n  export enum Event {\n    /**\n     * Raised when outgoingCallMessage fails.\n     * See {@link (OutgoingCallMessage:interface).(addListener:1)}.\n     */\n    'Failure' = 'failure',\n    /**\n     * Raised when outgoingCallMessage has been sent.\n     * See {@link (OutgoingCallMessage:interface).(addListener:2)}.\n     */\n    'Sent' = 'sent',\n  }\n\n  /**\n   * Listener types for all events emitted by a\n   * {@link (OutgoingCallMessage:class) | OutgoingCallMessage: object}\n   */\n  export namespace Listener {\n    /**\n     * OutgoingCallMessage failure event listener. This should be the function signature of\n     * any event listener bound to the {@link (OutgoingCallMessage:namespace).Event.Failure} event.\n     *\n     * @remarks\n     * See {@link (OutgoingCallMessage:interface).(addListener:1)}.\n     *\n     * See {@link TwilioErrors} for all error classes.\n     */\n    export type Failure = (error: TwilioError) => void;\n\n    /**\n     * OutgoingCallMessage sent event listner. This should be the function signature of\n     * any event listener bound to the {@link (OutgoingCallMessage:namespace).Event.Sent} event.\n     *\n     * @remarks\n     * See {@link (OutgoingCallMessage:interface).(addListener:2)}.\n     */\n    export type Sent = () => void;\n\n    /**\n     * Generic event listener. This should be the function signature of any\n     * event listener bound to any OutgoingCallMessage event.\n     *\n     * @remarks\n     * See {@link (OutgoingCallMessage:interface).(addListener:3)}.\n     */\n    export type Generic = (...args: any[]) => void;\n  }\n}\n"],"mappings":"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"}