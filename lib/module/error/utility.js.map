{"version":3,"names":["errorsByCode","TwilioError","InvalidArgumentError","constructTwilioError","message","code","ErrorClass","get"],"sources":["utility.ts"],"sourcesContent":["import { errorsByCode } from './generated';\nimport { TwilioError } from './TwilioError';\nimport { InvalidArgumentError } from './InvalidArgumentError';\n\n/**\n * Uses the generated error-code map to create the appropriate error.\n * If the code is \"unexpected\" such that there is no constructor for that\n * specific code, this function will default to a generic {@link TwilioError}.\n *\n * @param message an error message\n * @param code a Twilio error code, for example `31209`\n *\n * @returns a {@link TwilioError} or appropriate sub-class\n */\nexport function constructTwilioError(\n  message: string,\n  code: number\n): TwilioError {\n  if (typeof message !== 'string') {\n    throw new InvalidArgumentError(\n      'The \"message\" argument is not of type \"string\".'\n    );\n  }\n\n  if (typeof code !== 'number') {\n    throw new InvalidArgumentError(\n      'The \"code\" argument is not of type \"number\".'\n    );\n  }\n\n  const ErrorClass = errorsByCode.get(code);\n\n  return typeof ErrorClass !== 'undefined'\n    ? new ErrorClass(message)\n    : new TwilioError(message, code);\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,aAAa;AAC1C,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,oBAAoB,QAAQ,wBAAwB;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAClCC,OAAe,EACfC,IAAY,EACC;EACb,IAAI,OAAOD,OAAO,KAAK,QAAQ,EAAE;IAC/B,MAAM,IAAIF,oBAAoB,CAC5B,iDACF,CAAC;EACH;EAEA,IAAI,OAAOG,IAAI,KAAK,QAAQ,EAAE;IAC5B,MAAM,IAAIH,oBAAoB,CAC5B,8CACF,CAAC;EACH;EAEA,MAAMI,UAAU,GAAGN,YAAY,CAACO,GAAG,CAACF,IAAI,CAAC;EAEzC,OAAO,OAAOC,UAAU,KAAK,WAAW,GACpC,IAAIA,UAAU,CAACF,OAAO,CAAC,GACvB,IAAIH,WAAW,CAACG,OAAO,EAAEC,IAAI,CAAC;AACpC"}