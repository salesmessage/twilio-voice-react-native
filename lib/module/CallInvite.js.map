{"version":3,"names":["Call","NativeEventEmitter","NativeModule","InvalidStateError","CallMessage","OutgoingCallMessage","Constants","EventEmitter","CallInvite","constructor","uuid","callSid","customParameters","from","to","state","_defineProperty","nativeCallInviteEvent","type","handler","_nativeEventHandler","Error","CallEventMessageReceived","callMessage","callMessageInfo","emit","Event","MessageReceived","_uuid","_callSid","_customParameters","_from","_to","_state","_handleMessageReceivedEvent","addListener","ScopeCallInvite","_handleNativeEvent","accept","options","State","Pending","callInfo","callInvite_accept","call","reject","callInvite_reject","isValid","callInvite_isValid","getCallSid","getCustomParameters","getFrom","getState","getTo","sendMessage","message","content","getContent","contentType","getContentType","messageType","getMessageType","voiceEventSid","call_sendMessage","JSON","stringify","outgoingCallMessage","_CallInvite2"],"sources":["CallInvite.tsx"],"sourcesContent":["/**\n * Copyright Â© 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport { Call } from './Call';\nimport { NativeEventEmitter, NativeModule } from './common';\nimport { InvalidStateError } from './error/InvalidStateError';\nimport type {\n  NativeCallInviteInfo,\n  NativeCallInviteEvents,\n  NativeCallInviteEventType,\n} from './type/CallInvite';\nimport type { CustomParameters, Uuid } from './type/common';\nimport { CallMessage } from './CallMessage';\nimport { OutgoingCallMessage } from './OutgoingCallMessage';\nimport { Constants } from './constants';\nimport { EventEmitter } from 'eventemitter3';\n\n/**\n * Defines strict typings for all events emitted by {@link (CallInvite:class)\n * | CallInvite objects}.\n *\n * @remarks\n * Note that the `on` function is an alias for the `addListener` function.\n * They share identical functionality and either may be used interchangeably.\n *\n * - See also the {@link (CallInvite:class) | CallInvite class}.\n * - See also the {@link (CallInvite:namespace) | CallInvite namespace}.\n *\n * @public\n */\nexport declare interface CallInvite {\n  /**\n   * ------------\n   * Emit Typings\n   * ------------\n   */\n\n  /** @internal */\n  emit(\n    messageReceivedEvent: CallInvite.Event.MessageReceived,\n    callMessage: CallMessage\n  ): boolean;\n\n  /** @internal */\n  emit(callInviteEvent: CallInvite.Event, ...args: any[]): boolean;\n\n  /**\n   * ----------------\n   * Listener Typings\n   * ----------------\n   */\n\n  /**\n   * MessageReceived event. Raised when {@link (CallMessage:class)} is received.\n   * @example\n   * ```typescript\n   * callInvite.addListener(CallInvite.Event.MessageReceived, (message) => {\n   *    // callMessage received\n   * })\n   * ```\n   *\n   * @param messageReceivedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The callMessage object\n   */\n  addListener(\n    messageReceivedEvent: CallInvite.Event.MessageReceived,\n    listener: CallInvite.Listener.MessageReceived\n  ): this;\n  /** {@inheritDoc (CallInvite:interface).(addListener:1)} */\n  on(\n    callMessageEvent: CallInvite.Event.MessageReceived,\n    listener: CallInvite.Listener.MessageReceived\n  ): this;\n\n  /**\n   * Generic event listener typings.\n   * @param callInviteEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addListener(\n    callInviteEvent: CallInvite.Event,\n    listener: CallInvite.Listener.Generic\n  ): this;\n  /**\n   * {@inheritDoc (CallInvite:interface).(addListener:2)}\n   */\n  on(\n    callInviteEvent: CallInvite.Event,\n    listener: CallInvite.Listener.Generic\n  ): this;\n}\n\n/**\n * Provides access to information about a call invite, including the call\n * parameters, and exposes functionality to accept or decline a call.\n *\n * @remarks\n *\n * Note that when a `CallInvite` is acted upon (i.e. when\n * {@link (CallInvite:class).accept} or {@link (CallInvite:class).reject} is\n * invoked), then the `CallInvite` is \"settled\".\n *\n * The state of the `CallInvite` is changed from\n * {@link (CallInvite:namespace).State.Pending} to\n * {@link (CallInvite:namespace).State.Accepted} or\n * {@link (CallInvite:namespace).State.Rejected} and the `CallInvite` can no\n * longer be acted upon further.\n *\n * Further action after \"settling\" a `CallInvite` will throw an error.\n *\n *  - See the {@link (CallInvite:namespace) | CallInvite namespace} for\n *    enumerations and types used by this class.\n *\n * @public\n */\nexport class CallInvite extends EventEmitter {\n  /**\n   * The current state of the call invite.\n   *\n   * @remarks\n   * See {@link (CallInvite:namespace).State}.\n   */\n  private _state: CallInvite.State;\n  /**\n   * The `Uuid` of this call invite. Used to identify calls between the JS and\n   * native layer so we can associate events and native functionality between\n   * the layers.\n   */\n  private _uuid: Uuid;\n  /**\n   * A string representing the SID of this call.\n   */\n  private _callSid: string;\n  /**\n   * Call custom parameters.\n   */\n  private _customParameters: CustomParameters;\n  /**\n   * Call `from` parameter.\n   */\n  private _from: string;\n  /**\n   * Call `to` parameter.\n   */\n  private _to: string;\n\n  /**\n   * Handlers for native callInvite events. Set upon construction so we can\n   * dynamically bind events to handlers.\n   *\n   * @privateRemarks\n   * This is done by the constructor so this mapping isn't made every time the\n   * {@link (CallInvite:class)._handleNativeEvent} function is invoked.\n   */\n  private _nativeEventHandler: Record<\n    NativeCallInviteEventType,\n    (callInviteEvent: NativeCallInviteEvents) => void\n  >;\n\n  /**\n   * These objects should not be instantiated by consumers of the SDK. All\n   * instances of the `CallInvite` class should be emitted by the SDK.\n   *\n   * @param nativeCallInviteInfo - A dataobject containing the native\n   * information of a call invite.\n   * @param state - Mocking options for testing.\n   *\n   * @internal\n   */\n  constructor(\n    { uuid, callSid, customParameters, from, to }: NativeCallInviteInfo,\n    state: CallInvite.State\n  ) {\n    super();\n\n    this._uuid = uuid;\n    this._callSid = callSid;\n    this._customParameters = { ...customParameters };\n    this._from = from;\n    this._to = to;\n\n    this._state = state;\n\n    this._nativeEventHandler = {\n      /**\n       * Call Message\n       */\n      [Constants.CallEventMessageReceived]: this._handleMessageReceivedEvent,\n    };\n\n    NativeEventEmitter.addListener(\n      Constants.ScopeCallInvite,\n      this._handleNativeEvent\n    );\n  }\n\n  /**\n   * This intermediate native callInvite event handler acts as a \"gate\".\n   * @param nativeCallInviteEvent - A callInvite event directly from the native layer.\n   */\n  private _handleNativeEvent = (\n    nativeCallInviteEvent: NativeCallInviteEvents\n  ) => {\n    const { type } = nativeCallInviteEvent;\n\n    const handler = this._nativeEventHandler[type];\n    if (typeof handler === 'undefined') {\n      throw new Error(\n        `Unknown callInvite event type received from the native layer: \"${type}\".`\n      );\n    }\n\n    handler(nativeCallInviteEvent);\n  };\n\n  /**\n   * Handler for the {@link (CallInvite:namespace).Event.MessageReceived} event.\n   * @param nativeCallEvent - The native call event.\n   */\n  private _handleMessageReceivedEvent = (\n    nativeCallInviteEvent: NativeCallInviteEvents\n  ) => {\n    if (nativeCallInviteEvent.type !== Constants.CallEventMessageReceived) {\n      throw new Error(\n        'Incorrect \"callInvite#Received\" handler called for type' +\n          `\"${nativeCallInviteEvent.type}`\n      );\n    }\n\n    const { callMessage: callMessageInfo } = nativeCallInviteEvent;\n\n    const callMessage = new CallMessage(callMessageInfo);\n\n    this.emit(CallInvite.Event.MessageReceived, callMessage);\n  };\n\n  /**\n   * Accept a call invite. Sets the state of this call invite to\n   * {@link (CallInvite:namespace).State.Accepted}.\n   * @param options - Options to pass to the native layer when accepting the\n   * call.\n   * @returns\n   *  - Resolves when a {@link (Call:class) | Call object} associated with this\n   *    {@link (CallInvite:class)} has been created.\n   */\n  async accept(options: CallInvite.AcceptOptions = {}): Promise<Call> {\n    if (this._state !== CallInvite.State.Pending) {\n      throw new InvalidStateError(\n        `Call in state \"${this._state}\", ` +\n          `expected state \"${CallInvite.State.Pending}\".`\n      );\n    }\n\n    const callInfo = await NativeModule.callInvite_accept(this._uuid, options);\n\n    const call = new Call(callInfo);\n\n    return call;\n  }\n\n  /**\n   * Reject a call invite. Sets the state of this call invite to\n   * {@link (CallInvite:namespace).State.Rejected}.\n   * @returns\n   *  - Resolves when the {@link (CallInvite:class)} has been rejected.\n   */\n  async reject(): Promise<void> {\n    if (this._state !== CallInvite.State.Pending) {\n      throw new InvalidStateError(\n        `Call in state \"${this._state}\", ` +\n          `expected state \"${CallInvite.State.Pending}\".`\n      );\n    }\n\n    await NativeModule.callInvite_reject(this._uuid);\n  }\n\n  /**\n   * Check if a `CallInvite` is valid.\n   *\n   * @returns\n   *  - TODO\n   *\n   * @alpha\n   */\n  isValid(): Promise<boolean> {\n    return NativeModule.callInvite_isValid(this._uuid);\n  }\n\n  /**\n   * Get the call SID associated with this `CallInvite` class.\n   * @returns - A string representing the call SID.\n   */\n  getCallSid(): string {\n    return this._callSid;\n  }\n\n  /**\n   * Get the custom parameters of the call associated with this `CallInvite`\n   * class.\n   * @returns - A `Record` of custom parameters.\n   */\n  getCustomParameters(): CustomParameters {\n    return this._customParameters;\n  }\n\n  /**\n   * Get the `from` parameter of the call associated with this `CallInvite`\n   * class.\n   * @returns - A `string` representing the `from` parameter.\n   */\n  getFrom(): string {\n    return this._from;\n  }\n\n  /**\n   * Get the `state` of the `CallInvite`.\n   * @returns - The `state` of this `CallInvite`.\n   */\n  getState(): CallInvite.State {\n    return this._state;\n  }\n\n  /**\n   * Get the `to` parameter of the call associated with this `CallInvite`\n   * class.\n   * @returns - A `string` representing the `to` parameter.\n   */\n  getTo(): string {\n    return this._to;\n  }\n\n  /**\n   * Send {@link (CallMessage:class)}.\n   *\n   * @example\n   * To send a user-defined-message\n   * ```typescript\n   * const message = new CallMessage({\n   *    content: { key1: 'This is a messsage from the parent call' },\n   *    contentType: CallMessage.ContentType.ApplicationJson,\n   *    messageType: CallMessage.MessageType.UserDefinedMessage\n   * })\n   * const outgoingCallMessage: OutgoingCallMessage = await call.sendMessage(message)\n   *\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Failure, (error) => {\n   *    // outgoingCallMessage failed, handle error\n   * });\n   *\n   * outgoingCallMessage.addListener(OutgoingCallMessage.Event.Sent, () => {\n   *    // outgoingCallMessage sent\n   * })\n   * ```\n   *\n   * @param content - The message content\n   * @param contentType - The MIME type for the message. See {@link (CallMessage:namespace).ContentType}.\n   * @param messageType - The message type. See {@link (CallMessage:namespace).MessageType}.\n   *\n   * @returns\n   *  A `Promise` that\n   *    - Resolves with the OutgoingCallMessage object.\n   *    - Rejects when the message is unable to be sent.\n   */\n  async sendMessage(message: CallMessage): Promise<OutgoingCallMessage> {\n    const content = message.getContent();\n    const contentType = message.getContentType();\n    const messageType = message.getMessageType();\n\n    const voiceEventSid = await NativeModule.call_sendMessage(\n      this._uuid,\n      JSON.stringify(content),\n      contentType,\n      messageType\n    );\n\n    const outgoingCallMessage = new OutgoingCallMessage({\n      content,\n      contentType,\n      messageType,\n      voiceEventSid,\n    });\n\n    return outgoingCallMessage;\n  }\n}\n\n/**\n * Provides enumerations and types used by a {@link (CallInvite:class)\n * | CallInvite object}.\n *\n * @remarks\n *  - See also the {@link (CallInvite:class) | CallInvite class}.\n *\n * @public\n */\nexport namespace CallInvite {\n  /**\n   * Options to pass to the native layer when accepting the call.\n   */\n  export interface AcceptOptions {}\n\n  /**\n   * An enumeration of {@link (CallInvite:class)} states.\n   */\n  export enum State {\n    Pending = 'pending',\n    Accepted = 'accepted',\n    Rejected = 'rejected',\n  }\n\n  /**\n   * Enumeration of all event strings emitted by {@link (CallInvite:class)} objects.\n   */\n  export enum Event {\n    /**\n     * Event string for the `MessageReceived` event.\n     * See {@link (CallInvite:interface).(addListener:1)}\n     */\n    'MessageReceived' = 'messageReceived',\n  }\n\n  /**\n   * Listener types for all events emitted by a\n   * {@link (CallInvite:class) | Call object.}\n   */\n  export namespace Listener {\n    /**\n     * CallInviteMessage received event listener. This should be the function signature of\n     * any event listener bound to the {@link (CallInvite:namespace).Event.MessageReceived} event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:1)}.\n     */\n    export type MessageReceived = (callMessage: CallMessage) => void;\n\n    /**\n     * Generic event listener. This should be the function signature of any\n     * event listener bound to any call invite event.\n     *\n     * @remarks\n     * See {@link (CallInvite:interface).(addListener:2)}.\n     */\n    export type Generic = (...args: any[]) => void;\n  }\n}\n"],"mappings":"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"}